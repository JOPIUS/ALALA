# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ä–µ–∑—é–º–µ –∏–∑ —á–∞—Ç–æ–≤ Avito —á–µ—Ä–µ–∑ API –≤ –º–Ω–æ–≥–æ–ø–æ—Ç–æ–∫–µ.

–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:
- –ß–∏—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥—Å—á–µ—Ç–∞ —á–∞—Ç–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞
- –ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ chat_id –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
- –ß–µ—Ä–µ–∑ API Avito –∏—â–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ user_id –≤ 20 –ø–æ—Ç–æ–∫–æ–≤
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—é–º–µ –≤ Excel –∏ JSON

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  pip install requests pandas openpyxl

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python chat_to_resume_fetcher.py
  python chat_to_resume_fetcher.py --input avito_chat_count_20250922_032645.json
  python chat_to_resume_fetcher.py --threads 30
"""

from __future__ import annotations

import json
import re
import time
import requests
from pathlib import Path
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import List, Dict, Optional, Any
import pandas as pd
import sys


# ========== –ö–æ–Ω—Ñ–∏–≥ ==========
CLIENT_ID = "Dm4ruLMEr9MFsV72dN95"
CLIENT_SECRET = "f73lNoAJLzuqwoGtVaMnByhQfSlwcyIN_m7wyOeT"
API_BASE = "https://api.avito.ru"

DEFAULT_THREADS = 20
REQUEST_TIMEOUT = 15
RATE_LIMIT_DELAY = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats = {
    'processed': 0,
    'found_resumes': 0,
    'errors': 0,
    'rate_limited': 0
}


def log(msg: str) -> None:
    print(f"üìã [{datetime.now().strftime('%H:%M:%S')}] {msg}")


def get_access_token() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è API"""
    try:
        log("üîë –ü–æ–ª—É—á–∞–µ–º access token...")
        
        auth_url = f"{API_BASE}/token/"
        auth_data = {
            "grant_type": "client_credentials",
            "client_id": CLIENT_ID,
            "client_secret": CLIENT_SECRET
        }
        
        response = requests.post(auth_url, data=auth_data, timeout=REQUEST_TIMEOUT)
        response.raise_for_status()
        
        token_data = response.json()
        access_token = token_data.get("access_token")
        
        if access_token:
            log("‚úÖ Access token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return access_token
        else:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token")
            return None
            
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None


def extract_user_id_from_chat(chat_id: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç user_id –∏–∑ chat_id"""
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ chat_id:
    # a2u-145964554-316615541 -> 145964554
    # u2i-v~kNKwsHHlFCmuU7R30s8g -> –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    
    if chat_id.startswith('a2u-'):
        # –§–æ—Ä–º–∞—Ç a2u-USER_ID-ANOTHER_ID
        match = re.match(r'a2u-(\d+)-\d+', chat_id)
        if match:
            return match.group(1)
    elif chat_id.startswith('u2i-'):
        # –§–æ—Ä–º–∞—Ç u2i-ENCODED_ID -> –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ —É–∂–µ user_id –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ u2i-
        return chat_id[4:]  # —É–±–∏—Ä–∞–µ–º "u2i-"
    
    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    return chat_id


def search_resume_by_user(user_id: str, access_token: str) -> Optional[Dict[str, Any]]:
    """–ò—â–µ—Ç —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ API endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ
        search_endpoints = [
            f"{API_BASE}/job/v1/resumes?user_id={user_id}",
            f"{API_BASE}/job/v2/resumes?user_id={user_id}",
            f"{API_BASE}/job/v1/resumes/search?user_id={user_id}",
        ]
        
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json"
        }
        
        for endpoint in search_endpoints:
            try:
                time.sleep(RATE_LIMIT_DELAY)  # Rate limiting
                
                response = requests.get(endpoint, headers=headers, timeout=REQUEST_TIMEOUT)
                
                if response.status_code == 429:
                    # Rate limited
                    stats['rate_limited'] += 1
                    time.sleep(2)
                    continue
                    
                if response.status_code == 200:
                    data = response.json()
                    if data and 'results' in data and data['results']:
                        # –ù–∞—à–ª–∏ —Ä–µ–∑—é–º–µ
                        resume = data['results'][0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ä–µ–∑—é–º–µ
                        return {
                            'user_id': user_id,
                            'resume_id': resume.get('id'),
                            'resume_url': f"https://www.avito.ru/resumes/{resume.get('id')}",
                            'title': resume.get('title', ''),
                            'salary': resume.get('salary', {}),
                            'experience': resume.get('experience', {}),
                            'education': resume.get('education', {}),
                            'api_endpoint': endpoint,
                            'found_at': datetime.now().isoformat()
                        }
                elif response.status_code == 404:
                    # –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    continue
                    
            except requests.exceptions.Timeout:
                log(f"‚è∞ Timeout –¥–ª—è user_id: {user_id}")
                continue
            except Exception as e:
                log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {user_id}: {e}")
                continue
        
        return None
        
    except Exception as e:
        log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è user_id {user_id}: {e}")
        stats['errors'] += 1
        return None


def process_chat_batch(chat_batch: List[Dict], access_token: str, thread_id: int) -> List[Dict[str, Any]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á —á–∞—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    results = []
    
    for chat in chat_batch:
        try:
            chat_id = chat.get('chat_id', '')
            user_id = extract_user_id_from_chat(chat_id)
            
            if not user_id:
                continue
                
            # –ò—â–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            resume_data = search_resume_by_user(user_id, access_token)
            
            if resume_data:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                resume_data.update({
                    'chat_id': chat_id,
                    'chat_title': chat.get('title', ''),
                    'chat_type': chat.get('type', ''),
                    'last_message': chat.get('last_message', ''),
                    'chat_timestamp': chat.get('timestamp', ''),
                    'thread_id': thread_id
                })
                results.append(resume_data)
                stats['found_resumes'] += 1
                
                if len(results) % 5 == 0:
                    log(f"üßµ –ü–æ—Ç–æ–∫ {thread_id}: –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—é–º–µ")
            
            stats['processed'] += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 50 –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
            if stats['processed'] % 50 == 0:
                log(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']} | –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ: {stats['found_resumes']} | –û—à–∏–±–∫–∏: {stats['errors']}")
                
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat_id}: {e}")
            stats['errors'] += 1
    
    return results


def parse_cli_args(argv: List[str]) -> tuple[Optional[str], int]:
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    input_file = None
    threads = DEFAULT_THREADS
    
    try:
        if "--input" in argv:
            input_file = argv[argv.index("--input") + 1]
        if "--threads" in argv:
            threads = int(argv[argv.index("--threads") + 1])
    except (IndexError, ValueError):
        pass
    
    return input_file, threads


def find_latest_chat_file() -> Optional[str]:
    """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —á–∞—Ç–æ–≤"""
    chat_files = list(Path(".").glob("avito_chat_count_*.json"))
    if not chat_files:
        return None
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
    latest_file = max(chat_files, key=lambda f: f.stat().st_mtime)
    return str(latest_file)


def main() -> None:
    input_file, num_threads = parse_cli_args(sys.argv)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not input_file:
        input_file = find_latest_chat_file()
        if not input_file:
            log("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —á–∞—Ç–æ–≤")
            log("   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python chat_to_resume_fetcher.py --input avito_chat_count_XXXXXX.json")
            return
        log(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª: {input_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            chat_data = json.load(f)
        
        all_chat_ids = chat_data.get('all_chat_ids', [])
        chat_details = chat_data.get('chat_data', [])
        
        log(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_chat_ids)} chat_id –∏ {len(chat_details)} –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chat_list = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ chat_ids
        if all_chat_ids:
            log(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ {len(all_chat_ids)} chat_id")
            chat_list = [{'chat_id': cid, 'title': '', 'type': 'unknown'} for cid in all_chat_ids]
            
            # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –µ—Å–ª–∏ –µ—Å—Ç—å
            if chat_details:
                details_dict = {item.get('chat_id'): item for item in chat_details}
                for chat in chat_list:
                    chat_id = chat['chat_id']
                    if chat_id in details_dict:
                        chat.update(details_dict[chat_id])
        elif chat_details:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ chat_ids
            chat_list = chat_details
        
        log(f"üéØ –ë—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å {len(chat_list)} —á–∞—Ç–æ–≤ –≤ {num_threads} –ø–æ—Ç–æ–∫–æ–≤")
        
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {input_file}: {e}")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º access token
    access_token = get_access_token()
    if not access_token:
        log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access token. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CLIENT_ID –∏ CLIENT_SECRET")
        return
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —á–∞—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
    batch_size = len(chat_list) // num_threads + 1
    chat_batches = [chat_list[i:i + batch_size] for i in range(0, len(chat_list), batch_size)]
    
    log(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {len(chat_batches)} –ø–æ—Ç–æ–∫–æ–≤ –ø–æ ~{batch_size} —á–∞—Ç–æ–≤ –∫–∞–∂–¥—ã–π")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    all_results = []
    start_time = time.time()
    
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –≤ –ø–æ—Ç–æ–∫–∏
        future_to_thread = {
            executor.submit(process_chat_batch, batch, access_token, i+1): i+1 
            for i, batch in enumerate(chat_batches)
        }
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for future in as_completed(future_to_thread):
            thread_id = future_to_thread[future]
            try:
                batch_results = future.result()
                all_results.extend(batch_results)
                log(f"‚úÖ –ü–æ—Ç–æ–∫ {thread_id} –∑–∞–≤–µ—Ä—à–µ–Ω: {len(batch_results)} —Ä–µ–∑—é–º–µ –Ω–∞–π–¥–µ–Ω–æ")
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {thread_id}: {e}")
    
    end_time = time.time()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log(f"üèÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.1f} —Å–µ–∫—É–Ω–¥")
    log(f"üìä –ò—Ç–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {stats['processed']}")
    log(f"üéØ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—é–º–µ: {stats['found_resumes']}")
    log(f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {stats['errors']}")
    log(f"üïê Rate limit –∑–∞–¥–µ—Ä–∂–µ–∫: {stats['rate_limited']}")
    
    if not all_results:
        log("üòû –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # JSON —Ñ–∞–π–ª
    json_file = f"chat_resumes_{timestamp}.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump({
            'timestamp': timestamp,
            'source_file': input_file,
            'parameters': {
                'threads': num_threads,
                'total_chats_processed': stats['processed'],
                'resumes_found': stats['found_resumes']
            },
            'statistics': stats,
            'results': all_results
        }, f, ensure_ascii=False, indent=2)
    
    # Excel —Ñ–∞–π–ª
    try:
        df = pd.DataFrame(all_results)
        excel_file = f"chat_resumes_{timestamp}.xlsx"
        df.to_excel(excel_file, index=False, engine='openpyxl')
        log(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {excel_file}")
    except Exception as e:
        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Excel: {e}")
    
    log(f"üíæ JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {json_file}")
    log(f"üéâ –ì–æ—Ç–æ–≤–æ! –ù–∞–π–¥–µ–Ω–æ {len(all_results)} —Ä–µ–∑—é–º–µ –∏–∑ {stats['processed']} —á–∞—Ç–æ–≤")


if __name__ == "__main__":
    main()