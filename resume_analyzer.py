#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏–∑ CSV —Ñ–∞–π–ª–∞
"""
import requests
import json
import csv
import os
from datetime import datetime
from pathlib import Path

class AvitoResumeAnalyzer:
    def __init__(self, client_id, client_secret):
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = None
        self.base_url = "https://api.avito.ru"
        
    def get_access_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token"""
        url = f"{self.base_url}/token"
        data = {
            'grant_type': 'client_credentials',
            'client_id': self.client_id,
            'client_secret': self.client_secret
        }
        
        response = requests.post(url, data=data)
        if response.status_code == 200:
            result = response.json()
            self.access_token = result['access_token']
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.access_token[:20]}...")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
            return False
    
    def get_headers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json'
        }
    
    def read_bought_resumes_csv(self, csv_path):
        """–ß—Ç–µ–Ω–∏–µ ID –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
        bought_ids = []
        
        if not os.path.exists(csv_path):
            print(f"‚ùå –§–∞–π–ª {csv_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return bought_ids
            
        try:
            with open(csv_path, 'r', encoding='utf-8-sig') as file:
                # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —á—Ç–µ–Ω–∏—è CSV
                content = file.read().strip()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
                lines = content.split('\n')
                print(f"üìÑ –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ñ–∞–π–ª–∞:")
                for i, line in enumerate(lines[:5]):
                    print(f"   {i+1}: {line}")
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∏—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å ID
                if len(lines) > 0:
                    first_line = lines[0].lower()
                    if 'id' in first_line or 'resume' in first_line:
                        # –ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
                        reader = csv.DictReader(lines)
                        for row in reader:
                            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å ID —Ä–µ–∑—é–º–µ
                            for key, value in row.items():
                                if 'id' in key.lower() and value.strip().isdigit():
                                    bought_ids.append(int(value.strip()))
                                    break
                    else:
                        # –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ ID
                        for line in lines:
                            line = line.strip()
                            if line.isdigit():
                                bought_ids.append(int(line))
                            elif ',' in line:
                                # –ú–æ–∂–µ—Ç –±—ã—Ç—å CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
                                parts = line.split(',')
                                for part in parts:
                                    part = part.strip()
                                    if part.isdigit():
                                        bought_ids.append(int(part))
                                        
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(bought_ids)} –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ: {bought_ids[:10]}{'...' if len(bought_ids) > 10 else ''}")
            return bought_ids
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {csv_path}: {e}")
            return bought_ids
    
    def get_resume_details(self, resume_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑—é–º–µ –ø–æ ID"""
        url = f"{self.base_url}/job/v1/resumes/{resume_id}"
        
        try:
            response = requests.get(url, headers=self.get_headers())
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 404:
                print(f"‚ö†Ô∏è –†–µ–∑—é–º–µ {resume_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return None
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—é–º–µ {resume_id}: {response.status_code} - {response.text}")
                return None
        except Exception as e:
            print(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—é–º–µ {resume_id}: {e}")
            return None
    
    def check_resume_messages(self, resume_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–∑—é–º–µ (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints)"""
        # –í–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        endpoints = [
            f"/messenger/v1/resumes/{resume_id}/chats",
            f"/messenger/v2/resumes/{resume_id}/chats", 
            f"/job/v1/resumes/{resume_id}/messages",
            f"/job/v1/resumes/{resume_id}/chat",
            f"/messenger/chats?resume_id={resume_id}",
            f"/messenger/v1/chats?resume_id={resume_id}"
        ]
        
        for endpoint in endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                response = requests.get(url, headers=self.get_headers())
                if response.status_code == 200:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π: {endpoint}")
                    return response.json()
                elif response.status_code not in [404, 400]:
                    print(f"üîç {endpoint}: {response.status_code} - {response.text[:100]}")
            except Exception as e:
                continue
                
        return None
    
    def analyze_bought_resumes(self, csv_path):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ"""
        print("üöÄ –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ...")
        print("=" * 60)
        
        # –ß–∏—Ç–∞–µ–º ID –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
        bought_ids = self.read_bought_resumes_csv(csv_path)
        
        if not bought_ids:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return
        
        results = []
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {len(bought_ids)} –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ...")
        
        for i, resume_id in enumerate(bought_ids[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"\nüìã –†–µ–∑—é–º–µ {i+1}/{min(len(bought_ids), 10)}: ID {resume_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—é–º–µ
            resume_details = self.get_resume_details(resume_id)
            
            if resume_details:
                print(f"   üë§ {resume_details.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"   üìç {resume_details.get('location', {}).get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {resume_details.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = self.check_resume_messages(resume_id)
                
                result = {
                    'resume_id': resume_id,
                    'title': resume_details.get('title', ''),
                    'age': resume_details.get('age', 0),
                    'location': resume_details.get('location', {}).get('title', ''),
                    'salary': resume_details.get('salary', 0),
                    'has_messages': messages is not None,
                    'messages_data': messages,
                    'created_at': resume_details.get('created_at', ''),
                    'updated_at': resume_details.get('updated_at', '')
                }
                
                results.append(result)
                
                if messages:
                    print(f"   üí¨ –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è!")
                else:
                    print(f"   üì≠ –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑—é–º–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_results(results)
        
        return results
    
    def save_results(self, results):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
        json_filename = f"avito_resume_analysis_{timestamp}.json"
        with open(json_filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        csv_filename = f"avito_resume_analysis_{timestamp}.csv"
        with open(csv_filename, 'w', newline='', encoding='utf-8-sig') as f:
            if results:
                writer = csv.DictWriter(f, fieldnames=['resume_id', 'title', 'age', 'location', 'salary', 'has_messages', 'created_at', 'updated_at'])
                writer.writeheader()
                for result in results:
                    # –£–±–∏—Ä–∞–µ–º —Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è CSV
                    csv_row = {k: v for k, v in result.items() if k != 'messages_data'}
                    writer.writerow(csv_row)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:")
        print(f"   üìÑ JSON: {json_filename}")
        print(f"   üìä CSV: {csv_filename}")

def main():
    # –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    CLIENT_ID = "pEm43bT2JX47aeb8OxNV"
    CLIENT_SECRET = "pURVGURY6Mt95xTPxrTHJ_SpzL7sBPNRfTt7qQkw"
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫—É–ø–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–∑—é–º–µ
    CSV_PATH = r"C:\ManekiNeko\AVITO_API\output\already_bought_id.csv"
    
    print("üéØ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ Avito")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = AvitoResumeAnalyzer(CLIENT_ID, CLIENT_SECRET)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    if not analyzer.get_access_token():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ
    results = analyzer.analyze_bought_resumes(CSV_PATH)
    
    if results:
        print(f"\nüìä –ò–¢–û–ì–ò –ê–ù–ê–õ–ò–ó–ê:")
        print(f"üî¢ –í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(results)}")
        with_messages = sum(1 for r in results if r['has_messages'])
        print(f"üí¨ –° –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {with_messages}")
        print(f"üì≠ –ë–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(results) - with_messages}")
        
        if with_messages > 0:
            print(f"\n‚úÖ –†–µ–∑—é–º–µ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:")
            for result in results:
                if result['has_messages']:
                    print(f"   üìã ID {result['resume_id']}: {result['title']}")
    else:
        print("\n‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

if __name__ == "__main__":
    main()