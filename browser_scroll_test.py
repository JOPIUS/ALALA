# browser_scroll_test.py
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ Avito —Ä–µ–∑—é–º–µ.
–§–æ–∫—É—Å –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞.
"""

from pathlib import Path
from datetime import datetime
from playwright.sync_api import sync_playwright, Error as PwError
import time
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USER_DATA_DIR = Path("./avito_browser_profile").resolve()
TARGET_URL = "https://www.avito.ru/profile/paid-cvs"

# –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±–µ–∑ –ª–∏—à–Ω–∏—Ö –æ–∂–∏–¥–∞–Ω–∏–π
MAX_TOTAL_SCROLL_SEC = 180  # –í–µ—Ä–Ω–µ–º –∫ —Ä–∞–∑—É–º–Ω–æ–º—É –ª–∏–º–∏—Ç—É
QUIET_MS = 1000             # –£–º–µ–Ω—å—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è
STABLE_GROWTH_ROUNDS = 15   # –ö–æ–º–ø—Ä–æ–º–∏—Å—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –ø–æ–ª–Ω–æ—Ç–æ–π
MAX_ACTIVE_BUTTON_ITERATIONS = 200  # –ú–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
NAV_TIMEOUT = 30_000        # –ë—ã—Å—Ç—Ä—ã–µ —Ç–∞–π–º–∞—É—Ç—ã

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
CARD_SELECTOR = '[data-marker="cv-snippet"]'
MORE_BUTTON_PATTERNS = [
    'button:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë")',
    'button:has-text("–µ—â—ë")', 
    'button:has-text("–ó–∞–≥—Ä—É–∑–∏—Ç—å –µ—â—ë")',
    'a:has-text("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë")',
    '[data-marker*="load-more"]',
    '[data-marker*="show-more"]'
]

def log_with_time(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    print(f"üïê [{datetime.now().strftime('%H:%M:%S')}] {msg}")

def detect_end_of_page(page):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    try:
        end_indicators = page.evaluate("""
            () => {
                // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                const indicators = {
                    footer_visible: false,
                    no_more_text: false,
                    pagination_end: false,
                    scroll_at_bottom: false,
                    empty_space: false,
                    active_load_buttons: 0  // –í–ê–ñ–ù–û: —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
                };
                
                // 1. –ü–†–ò–û–†–ò–¢–ï–¢: –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ "–ï—â—ë"
                const moreButtons = document.querySelectorAll('button, a, [role="button"]');
                for (const btn of moreButtons) {
                    const text = btn.textContent.toLowerCase().trim();
                    if (text.includes('–µ—â—ë') && btn.offsetParent !== null && 
                        !btn.disabled && !btn.getAttribute('aria-disabled')) {
                        indicators.active_load_buttons++;
                    }
                }
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "–ï—â—ë" - –ù–ï –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã!
                if (indicators.active_load_buttons > 0) {
                    console.log(`[DETECT] –ù–∞–π–¥–µ–Ω–æ ${indicators.active_load_buttons} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ "–ï—â—ë" - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º`);
                    return indicators; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ –≤–∞–∂–Ω–æ
                }
                
                // 2. –ü–æ–∏—Å–∫ —Ñ—É—Ç–µ—Ä–∞ –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ü–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫)
                const footerSelectors = [
                    'footer', '.footer', '[class*="footer"]',
                    '.pagination-end', '.no-results', '.end-of-list',
                    '[class*="nothing-found"]', '[class*="no-more"]',
                    'div:contains("–±–æ–ª—å—à–µ —Ä–µ–∑—é–º–µ –Ω–µ—Ç")', 
                    'div:contains("–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞")',
                    'div:contains("–≤—Å–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")'
                ];
                
                for (const selector of footerSelectors) {
                    try {
                        const elements = document.querySelectorAll(selector);
                        for (const el of elements) {
                            if (el.offsetParent !== null) { // —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–∏–º—ã–π
                                const rect = el.getBoundingClientRect();
                                if (rect.top < window.innerHeight) {
                                    indicators.footer_visible = true;
                                    break;
                                }
                            }
                        }
                        if (indicators.footer_visible) break;
                    } catch(e) {}
                }
                
                // 3. –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –æ —Ç–æ–º —á—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                const bodyText = document.body.textContent.toLowerCase();
                const noMorePatterns = [
                    '–±–æ–ª—å—à–µ —Ä–µ–∑—é–º–µ –Ω–µ—Ç', '–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞', '–≤—Å–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                    '–±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
                    '–ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ä–µ–∑—é–º–µ', '–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ —Ä–µ–∑—é–º–µ',
                    'no more results', 'end of list', 'nothing found'
                ];
                
                indicators.no_more_text = noMorePatterns.some(pattern => 
                    bodyText.includes(pattern)
                );
                
                // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
                const scrollTop = window.pageYOffset;
                const scrollHeight = document.documentElement.scrollHeight;
                const clientHeight = window.innerHeight;
                
                indicators.scroll_at_bottom = (scrollTop + clientHeight + 100) >= scrollHeight;
                
                // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–æ–ª—å—à–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –≤ –∫–æ–Ω—Ü–µ
                const lastElement = document.querySelector('[data-marker="cv-snippet"]:last-child');
                if (lastElement) {
                    const lastRect = lastElement.getBoundingClientRect();
                    const bottomSpace = scrollHeight - (lastRect.bottom + scrollTop);
                    indicators.empty_space = bottomSpace > window.innerHeight * 2; // –±–æ–ª—å—à–µ 2 —ç–∫—Ä–∞–Ω–æ–≤ –ø—É—Å—Ç–æ—Ç—ã
                }
                
                // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                const paginationButtons = document.querySelectorAll(
                    'button:disabled, .pagination .disabled, [aria-disabled="true"]'
                );
                indicators.pagination_end = paginationButtons.length > 0;
                
                return indicators;
            }
        """)
        
        return end_indicators
    except Exception as e:
        log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return {"footer_visible": False, "no_more_text": False, "pagination_end": False, 
                "scroll_at_bottom": False, "empty_space": False, "active_load_buttons": 999}

def count_cards(page):
    """–ü–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ"""
    try:
        return page.evaluate(f'() => document.querySelectorAll(\'{CARD_SELECTOR}\').length')
    except Exception:
        return 0

def wait_for_network_idle(page, timeout_ms=3000):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        page.wait_for_load_state("networkidle", timeout=timeout_ms)
        return True
    except Exception:
        return False

def fast_scroll_to_load_all(page, target_count=None, max_time_sec=180):
    """
    –ë–´–°–¢–†–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ v6
    
    –£–ª—É—á—à–µ–Ω–∏—è v6:
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ (–ë–ï–ó –∫–Ω–æ–ø–æ–∫ "–ï—â—ë")
    - –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    - –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑ –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Å—Ç—Ä—è–ª–∞
    - –ú–∞—Å—à—Ç–∞–± 60% –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    """
    log_with_time(f"üöÄ –ë–´–°–¢–†–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ v6 - –ê–í–¢–û–ü–û–î–ì–†–£–ó–ö–ê (—Ü–µ–ª—å: {target_count or '–í–°–ï'}, –ª–∏–º–∏—Ç: {max_time_sec}—Å)")
    
    start_time = time.time()
    deadline = start_time + max_time_sec
    
    last_count = 0
    last_height = 0
    no_height_change_rounds = 0
    iteration = 0
    last_log_time = start_time
    
    initial_count = count_cards(page)
    initial_height = page.evaluate("document.documentElement.scrollHeight")
    log_with_time(f"üìã –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {initial_count} —Ä–µ–∑—é–º–µ, –≤—ã—Å–æ—Ç–∞: {initial_height}px")
    
    while time.time() < deadline:
        iteration += 1
        current_count = count_cards(page)
        current_height = page.evaluate("document.documentElement.scrollHeight")
        current_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –∏–ª–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
        if current_count > last_count or current_height > last_height or (current_time - last_log_time) > 5:
            if current_count > last_count or current_height > last_height:
                count_progress = current_count - last_count
                height_progress = current_height - last_height
                log_with_time(f"üìà +{count_progress} = {current_count} —Ä–µ–∑—é–º–µ, –≤—ã—Å–æ—Ç–∞: {current_height}px (+{height_progress}) [–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}]")
                last_count = current_count
                last_height = current_height
                no_height_change_rounds = 0
            else:
                log_with_time(f"‚è≥ {current_count} —Ä–µ–∑—é–º–µ, –≤—ã—Å–æ—Ç–∞: {current_height}px [–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}, —Å—Ç–∞–±–∏–ª—å–Ω–æ: {no_height_change_rounds}]")
            last_log_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
            if target_count and current_count >= target_count:
                log_with_time(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: {current_count} >= {target_count}")
                break
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –µ—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ç - –∑–∞—Å—Ç—Ä—è–ª–∏
        if current_height <= last_height:
            no_height_change_rounds += 1
        else:
            no_height_change_rounds = 0
        
        # –ë—ã—Å—Ç—Ä–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞
        try:
            # 1. –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            page.evaluate("window.scrollBy(0, 1500)")
            
            # 2. –ö–∞–∂–¥—ã–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ - —Å–∫—Ä–æ–ª–ª –¥–æ –∫–æ–Ω—Ü–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–≥—Ä—É–∑–∫–∏
            if iteration % 3 == 0:
                page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            
            # 3. –ï—Å–ª–∏ –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–≥–æ –Ω–µ —Ä–∞—Å—Ç–µ—Ç - –¥–µ–ª–∞–µ–º "–≤—Å—Ç—Ä—è—Å–∫—É"
            if no_height_change_rounds > 0 and no_height_change_rounds % 5 == 0:
                log_with_time(f"ÔøΩ –í—Å—Ç—Ä—è—Å–∫–∞ #{no_height_change_rounds // 5}: —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑")
                # –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö
                page.evaluate("window.scrollBy(0, -800)")
                time.sleep(0.1)
                # –ü–æ—Ç–æ–º —Å—Ä–∞–∑—É –≤–Ω–∏–∑
                page.evaluate("window.scrollBy(0, 2000)")
                time.sleep(0.2)
            
            # 4. –ö–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ —Ä–æ—Å—Ç–∞ –≤—ã—Å–æ—Ç—ã - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã
            if no_height_change_rounds > 0 and no_height_change_rounds % 10 == 0:
                log_with_time(f"üö® –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –≤—Å—Ç—Ä—è—Å–∫–∞ #{no_height_change_rounds // 10}")
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤ –Ω–∞—á–∞–ª–æ –∏ –æ–±—Ä–∞—Ç–Ω–æ
                page.evaluate("window.scrollTo(0, 0)")
                time.sleep(0.3)
                page.keyboard.press("End")
                time.sleep(0.3)
                # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫—Ä–æ–ª–ª—ã –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                for shake in range(3):
                    page.evaluate("window.scrollBy(0, -1000)")
                    time.sleep(0.1)
                    page.evaluate("window.scrollBy(0, 2000)")
                    time.sleep(0.1)
            
            # 5. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
            time.sleep(0.05)
            
            # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–∑—Ä–µ–¥–∫–∞
            if iteration % 50 == 0:
                wait_for_network_idle(page, timeout_ms=500)
                
        except Exception as e:
            if iteration % 100 == 0:
                log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
        
        # –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞: –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –Ω–µ—Ç —Ä–æ—Å—Ç–∞ –≤—ã—Å–æ—Ç—ã
        if no_height_change_rounds >= 30:  # 30 –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ —Ä–æ—Å—Ç–∞ –≤—ã—Å–æ—Ç—ã
            log_with_time(f"ÔøΩ {no_height_change_rounds} –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ —Ä–æ—Å—Ç–∞ –≤—ã—Å–æ—Ç—ã - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫
            log_with_time("üöÄ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–µ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏...")
            breakthrough = False
            for final_attempt in range(20):
                # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª
                page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                page.keyboard.press("End")
                time.sleep(0.2)
                
                # –í—Å—Ç—Ä—è—Å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                page.evaluate("window.scrollBy(0, -1500)")
                time.sleep(0.1)
                page.evaluate("window.scrollBy(0, 3000)")
                time.sleep(0.3)
                
                new_count = count_cards(page)
                new_height = page.evaluate("document.documentElement.scrollHeight")
                
                if new_count > current_count or new_height > current_height:
                    log_with_time(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {final_attempt + 1}: +{new_count - current_count} —Ä–µ–∑—é–º–µ, +{new_height - current_height}px")
                    breakthrough = True
                    no_height_change_rounds = 0
                    break
                    
            if not breakthrough:
                log_with_time(f"üõë –í—Å–µ {final_attempt + 1} —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                break
    
    final_count = count_cards(page)
    total_elapsed = time.time() - start_time
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    final_end_check = detect_end_of_page(page)
    
    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_diagnostics = page.evaluate("""
        () => {
            const diagnostics = {
                total_height: Math.max(document.body.scrollHeight, document.documentElement.scrollHeight),
                current_scroll: window.pageYOffset,
                viewport_height: window.innerHeight,
                cards_total: document.querySelectorAll('[data-marker="cv-snippet"]').length,
                
                // –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                page_text_indicators: [],
                
                // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
                load_buttons: [],
                
                // –ü–æ–∏—Å–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                pagination_info: {},
                
                // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                last_elements: []
            };
            
            // –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const bodyText = document.body.textContent.toLowerCase();
            const endPatterns = [
                '–±–æ–ª—å—à–µ —Ä–µ–∑—é–º–µ –Ω–µ—Ç', '–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞', '–≤—Å–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                '–±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å', '–ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ä–µ–∑—é–º–µ',
                'nothing found', 'no more results', 'end of list', '–≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'
            ];
            
            endPatterns.forEach(pattern => {
                if (bodyText.includes(pattern)) {
                    diagnostics.page_text_indicators.push(pattern);
                }
            });
            
            // –ü–æ–∏—Å–∫ –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
            const buttonSelectors = [
                'button:contains("–ü–æ–∫–∞–∑–∞—Ç—å")', 'button:contains("–µ—â—ë")', 'button:contains("–ó–∞–≥—Ä—É–∑–∏—Ç—å")',
                '[data-marker*="load"]', '[data-marker*="more"]', '[data-marker*="show"]',
                '.load-more', '.show-more', '.pagination'
            ];
            
            document.querySelectorAll('button, a, [role="button"]').forEach(btn => {
                const text = btn.textContent.toLowerCase().trim();
                if (text.includes('–µ—â—ë') || text.includes('–ø–æ–∫–∞–∑–∞—Ç—å') || text.includes('–∑–∞–≥—Ä—É–∑') || 
                    text.includes('–±–æ–ª—å—à–µ') || text.includes('–¥–∞–ª–µ–µ')) {
                    diagnostics.load_buttons.push({
                        text: text,
                        visible: btn.offsetParent !== null,
                        enabled: !btn.disabled && !btn.getAttribute('aria-disabled'),
                        classes: btn.className
                    });
                }
            });
            
            // –ê–Ω–∞–ª–∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            const paginationElements = document.querySelectorAll('.pagination, [class*="pagination"], .paging, [class*="paging"]');
            if (paginationElements.length > 0) {
                diagnostics.pagination_info = {
                    found: true,
                    count: paginationElements.length,
                    texts: Array.from(paginationElements).map(el => el.textContent.trim()).slice(0, 3)
                };
            }
            
            // –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            const allElements = Array.from(document.body.querySelectorAll('*'));
            const lastElements = allElements.slice(-10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            diagnostics.last_elements = lastElements.map(el => ({
                tag: el.tagName,
                text: el.textContent.trim().substring(0, 100),
                classes: el.className,
                visible: el.offsetParent !== null
            }));
            
            return diagnostics;
        }
    """)
    
    log_with_time(f"üèÅ –ë–´–°–¢–†–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ v5 –∑–∞–≤–µ—Ä—à–µ–Ω!")
    log_with_time(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_count} —Ä–µ–∑—é–º–µ –∑–∞ {total_elapsed:.1f}—Å ({iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
    log_with_time(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_count/total_elapsed:.1f} —Ä–µ–∑—é–º–µ/—Å–µ–∫")
    log_with_time(f"üîç –ü—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {final_end_check}")
    
    # –î–ï–¢–ê–õ–¨–ù–ê–Ø –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    log_with_time("üî¨ –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
    log_with_time(f"üìè –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_diagnostics['total_height']}px")
    log_with_time(f"üìç –¢–µ–∫—É—â–∏–π —Å–∫—Ä–æ–ª–ª: {page_diagnostics['current_scroll']}px")
    log_with_time(f"üëÅÔ∏è –í—ã—Å–æ—Ç–∞ –æ–∫–Ω–∞: {page_diagnostics['viewport_height']}px")
    
    if page_diagnostics['page_text_indicators']:
        log_with_time(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ü–∞: {page_diagnostics['page_text_indicators']}")
    else:
        log_with_time("‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞")
    
    if page_diagnostics['load_buttons']:
        log_with_time(f"üîò –ù–∞–π–¥–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ ({len(page_diagnostics['load_buttons'])}):")
        for btn in page_diagnostics['load_buttons'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            log_with_time(f"   - '{btn['text']}' (–≤–∏–¥–∏–º–∞—è: {btn['visible']}, –∞–∫—Ç–∏–≤–Ω–∞—è: {btn['enabled']})")
    else:
        log_with_time("‚úÖ –ö–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –ù–ï –Ω–∞–π–¥–µ–Ω—ã (—Ö–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫)")
    
    if page_diagnostics['pagination_info'].get('found'):
        log_with_time(f"üìÑ –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {page_diagnostics['pagination_info']}")
    
    log_with_time("üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:")
    for i, elem in enumerate(page_diagnostics['last_elements'][-5:]):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
        if elem['text']:
            log_with_time(f"   {i+1}. {elem['tag']}: '{elem['text'][:50]}...'")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    scroll_position = page_diagnostics['current_scroll'] + page_diagnostics['viewport_height']
    page_height = page_diagnostics['total_height']
    scroll_percentage = (scroll_position / page_height) * 100
    
    log_with_time(f"üìä –ü—Ä–æ–∫—Ä—É—á–µ–Ω–æ: {scroll_percentage:.1f}% —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    
    if scroll_percentage < 95:
        log_with_time("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ –ù–ï –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã!")
    elif page_diagnostics['load_buttons']:
        log_with_time("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏!")
    elif not page_diagnostics['page_text_indicators']:
        log_with_time("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ –Ω–∞–π–¥–µ–Ω—ã —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞!")
    else:
        log_with_time("‚úÖ –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ")
    
    return final_count

def aggressive_scroll_to_load_all(page, target_count=None, max_time_sec=600):
    """
    –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –¥–ª—è –ü–û–õ–ù–û–ô –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ
    
    –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è v3:
    - –ù–ò–ö–û–ì–û –†–ê–ù–ù–ï–ì–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ª–∏–º–∏—Ç–∞
    - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    - –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
    - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç—Ç–∞–ø–∞
    """
    log_with_time(f"üöÄ –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ v3 (—Ü–µ–ª—å: {target_count or '–í–°–ï'}, –ª–∏–º–∏—Ç: {max_time_sec}—Å)")
    
    start_time = time.time()
    deadline = start_time + max_time_sec
    
    last_count = 0
    no_change_count = 0
    iteration = 0
    
    log_with_time(f"üìã –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ: {count_cards(page)}")
    
    while time.time() < deadline:
        iteration += 1
        current_count = count_cards(page)
        elapsed = time.time() - start_time
        
        if current_count > last_count:
            progress = current_count - last_count
            log_with_time(f"üìà –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: +{progress} = {current_count} —Ä–µ–∑—é–º–µ [{elapsed:.1f}—Å]")
            last_count = current_count
            no_change_count = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞
            if target_count and current_count >= target_count:
                log_with_time(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: {current_count} >= {target_count}")
                # –ù–û –ü–†–û–î–û–õ–ñ–ê–ï–ú –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏
                extra_time = min(60, max_time_sec * 0.1)  # 10% –æ—Ç –ª–∏–º–∏—Ç–∞ –∏–ª–∏ 60—Å
                log_with_time(f"‚è∞ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ {extra_time:.0f}—Å –¥–ª—è –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∏...")
                time.sleep(extra_time)
                break
        else:
            no_change_count += 1
            if iteration % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                log_with_time(f"‚è≥ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ({no_change_count} –ø–æ–¥—Ä—è–¥), —Ä–µ–∑—é–º–µ: {current_count}")
        
        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–∞ –∑–∞ —Ä–∞–∑
        try:
            # 1. –û–±—ã—á–Ω—ã–π —Å–∫—Ä–æ–ª–ª
            page.evaluate("window.scrollBy(0, 1000)")
            time.sleep(0.3)
            
            # 2. –°–∫—Ä–æ–ª–ª –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
            time.sleep(0.5)
            
            # 3. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
            for click_attempt in range(3):
                clicked = click_more_buttons(page)
                if clicked:
                    log_with_time(f"‚úÖ –ö–ª–∏–∫ #{click_attempt + 1} —É—Å–ø–µ—à–µ–Ω")
                    time.sleep(1.0)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
                else:
                    time.sleep(0.2)
            
            # 4. –°–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö –∏ —Å–Ω–æ–≤–∞ –≤–Ω–∏–∑ (–∏–Ω–æ–≥–¥–∞ –ø–æ–º–æ–≥–∞–µ—Ç)
            if iteration % 5 == 0:
                page.evaluate("window.scrollBy(0, -500)")
                time.sleep(0.2)
                page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                time.sleep(0.5)
            
            # 5. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            if iteration % 10 == 0:
                page_height = page.evaluate("Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)")
                scroll_pos = page.evaluate("window.pageYOffset")
                log_with_time(f"ÔøΩ –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_height}px, –ø–æ–∑–∏—Ü–∏—è: {scroll_pos}px")
            
            # 6. –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–∏ —Ç–æ–ª—å–∫–æ –∏–∑—Ä–µ–¥–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Ç–æ—Ä–º–æ–∑–∏—Ç—å
            if iteration % 15 == 0:
                wait_for_network_idle(page, timeout_ms=1000)
                
        except Exception as e:
            log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
            time.sleep(0.5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å–ª–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–¥–æ–ª–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        if no_change_count >= STABLE_GROWTH_ROUNDS:
            log_with_time(f"üîÑ {no_change_count} –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –ø—Ä–æ–±—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã")
            
            # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã –¥–ª—è "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            try:
                # –ù–∞–∂–∏–º–∞–µ–º Page Down –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                for _ in range(5):
                    page.keyboard.press("PageDown")
                    time.sleep(0.3)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ—Ñ—Ä–µ—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                page.evaluate("""
                // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
                const buttons = document.querySelectorAll('button, a, [role="button"]');
                let clicked = false;
                for (const btn of buttons) {
                    const text = btn.textContent.toLowerCase();
                    if (text.includes('–µ—â—ë') || text.includes('–±–æ–ª—å—à–µ') || text.includes('–ø–æ–∫–∞–∑–∞—Ç—å') || 
                        text.includes('–∑–∞–≥—Ä—É–∑') || text.includes('–¥–∞–ª–µ–µ') || text.includes('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å')) {
                        try {
                            btn.click();
                            clicked = true;
                            console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–ª–∏–∫–Ω—É–ª:', text);
                        } catch(e) {}
                    }
                }
                return clicked;
                """)
                
                time.sleep(2.0)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
                no_change_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                
            except Exception as e:
                log_with_time(f"‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e}")
    
    final_count = count_cards(page)
    total_elapsed = time.time() - start_time
    
    log_with_time(f"üèÅ –ê–ì–†–ï–°–°–ò–í–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    log_with_time(f"üìä –ò—Ç–æ–≥–æ: {final_count} —Ä–µ–∑—é–º–µ –∑–∞ {total_elapsed:.1f}—Å ({iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
    log_with_time(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_count/total_elapsed:.1f} —Ä–µ–∑—é–º–µ/—Å–µ–∫")
    
    return final_count

def extract_resume_data(page):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ –∏–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    log_with_time("üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ...")
    
    extract_js = f"""
    () => {{
        const cards = document.querySelectorAll('{CARD_SELECTOR}');
        const results = [];
        
        cards.forEach((card, index) => {{
            try {{
                const nameEl = card.querySelector('[data-marker="cv-snippet-name"]');
                const linkEl = card.querySelector('a[href*="/resume/"]');
                const salaryEl = card.querySelector('[data-marker="cv-snippet-salary"]');
                const locationEl = card.querySelector('[data-marker="cv-snippet-location"]');
                const dateEl = card.querySelector('[data-marker="cv-snippet-date"]');
                
                results.push({{
                    index: index + 1,
                    name: nameEl?.textContent?.trim() || '',
                    link: linkEl?.href || '',
                    resume_id: linkEl?.href?.match(/resume\\/([^?]+)/)?.[1] || '',
                    salary: salaryEl?.textContent?.trim() || '',
                    location: locationEl?.textContent?.trim() || '',
                    date: dateEl?.textContent?.trim() || '',
                    visible: card.getBoundingClientRect().top < window.innerHeight
                }});
            }} catch (e) {{
                console.error('Error processing card:', e);
            }}
        }});
        
        return results;
    }}
    """
    
    try:
        data = page.evaluate(extract_js)
        log_with_time(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
        return data
    except Exception as e:
        log_with_time(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def test_browser_performance():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è v6 - –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫"""
    log_with_time("üé≠ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ v6")
    
    USER_DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    with sync_playwright() as p:
        # –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —Å –º–∞—Å—à—Ç–∞–±–æ–º 60% –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º –∫–∞—Ä—Ç–∏–Ω–æ–∫
        context = p.chromium.launch_persistent_context(
            user_data_dir=str(USER_DATA_DIR),
            headless=False,
            viewport={"width": 1200, "height": 800},  # –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-web-security",
                "--disable-features=VizDisplayCompositor",
                "--disable-ipc-flooding-protection",
                "--disable-renderer-backgrounding",
                "--disable-background-timer-throttling",
                "--disable-backgrounding-occluded-windows",
                "--blink-settings=imagesEnabled=false",  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫–∏
                "--disable-images",                       # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
                "--disable-plugins",
                "--disable-extensions",
                "--force-device-scale-factor=0.6",      # –ú–ê–°–®–¢–ê–ë 60%
                "--window-size=1200,800"                 # –£–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            ],
        )
        
        context.set_default_timeout(NAV_TIMEOUT)
        context.set_default_navigation_timeout(NAV_TIMEOUT)
        page = context.new_page()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± —á–µ—Ä–µ–∑ JavaScript
        page.add_init_script("document.body.style.zoom = '0.6'")
        
        try:
            log_with_time("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito...")
            page.goto(TARGET_URL, wait_until="domcontentloaded")
            
            input("\\nüîë –í–æ–π–¥–∏—Ç–µ –≤ Avito –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...\\n")
            
            # –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
            initial_count = count_cards(page)
            log_with_time(f"üìã –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ: {initial_count}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –ª–∏–º–∏—Ç—ã - –±–µ–∑ –∫–Ω–æ–ø–æ–∫, —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞
            test_limits = [100, 500, None]  # None = –≤—Å–µ —Ä–µ–∑—é–º–µ
            
            for limit in test_limits:
                log_with_time(f"\\n{'='*60}")
                log_with_time(f"üß™ –¢–ï–°–¢ v6: –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ {limit or '–≤—Å–µ—Ö'} —Ä–µ–∑—é–º–µ (–∞–≤—Ç–æ–ø–æ–¥–≥—Ä—É–∑–∫–∞)")
                log_with_time(f"{'='*60}")
                
                start_time = time.time()
                
                # –°–±—Ä–æ—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page.reload(wait_until="domcontentloaded")
                time.sleep(2)
                
                # –ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ v6 –±–µ–∑ –ø–æ–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
                final_count = fast_scroll_to_load_all(page, target_count=limit)
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                data = extract_resume_data(page)
                
                elapsed = time.time() - start_time
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
                log_with_time(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}—Å")
                log_with_time(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—é–º–µ: {final_count}")
                log_with_time(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
                log_with_time(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_count/elapsed:.1f} —Ä–µ–∑—é–º–µ/—Å–µ–∫")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"browser_test_{limit or 'all'}_{timestamp}.json"
                
                result = {
                    "test_params": {
                        "limit": limit,
                        "timestamp": timestamp,
                        "duration_seconds": elapsed
                    },
                    "performance": {
                        "cards_loaded": final_count,
                        "data_extracted": len(data),
                        "speed_per_second": final_count/elapsed
                    },
                    "data": data[:10]  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(result, f, ensure_ascii=False, indent=2)
                
                log_with_time(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
                
                if limit is None:  # –î–ª—è —Ç–µ—Å—Ç–∞ "–≤—Å–µ —Ä–µ–∑—é–º–µ" –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–æ–≥–æ–Ω
                    break
                    
                input("\\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞...\\n")
        
        except Exception as e:
            log_with_time(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            log_with_time("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_browser_performance()