# avito_chats_advanced_collector.py
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–±–æ—Ä—â–∏–∫ —á–∞—Ç–æ–≤ Avito —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
–¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è offset=1000
"""

import requests
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Set
import threading

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
API_BASE = "https://api.avito.ru"
TIMEOUT = 30

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
CLIENT_ID = "Dm4ruLMEr9MFsV72dN95"
CLIENT_SECRET = "f73lNoAJLzuqwoGtVaMnByhQfSlwcyIN_m7wyOeT"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
BATCH_SIZE = 100  # –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ —á–∞—Ç–æ–≤
MAX_OFFSET = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π offset API
DELAY_BETWEEN_REQUESTS = 0.1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
DELAY_BETWEEN_BATCHES = 2.0  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–æ–ª—å—à–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò ===
SESSION = requests.Session()
SESSION.headers.update({
    "User-Agent": "Avito Chat Collector / Python",
    "Accept": "application/json"
})

class Token:
    def __init__(self) -> None:
        self._token: str | None = None
        self._exp: float = 0.0

    def _refresh(self) -> None:
        print("üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token...")
        r = SESSION.post(
            f"{API_BASE}/token",
            data={
                "grant_type": "client_credentials",
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET
            },
            timeout=TIMEOUT
        )
        if r.status_code != 200:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {r.status_code} {r.text}")
        data = r.json()
        self._token = data["access_token"]
        self._exp = time.time() + data.get("expires_in", 3600) - 60
        print(f"‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω, –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {data.get('expires_in', 3600)} —Å–µ–∫")

    def get(self) -> str:
        if not self._token or time.time() >= self._exp:
            self._refresh()
        return self._token

_tok = Token()

def get_user_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    resp = SESSION.get(f"{API_BASE}/core/v1/accounts/self", headers=headers, timeout=TIMEOUT)
    if resp.status_code != 200:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id: {resp.status_code} {resp.text}")
    
    data = resp.json()
    user_id = data.get("id") or data.get("user_id")
    if not user_id:
        raise RuntimeError(f"user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
    
    print(f"üë§ User ID: {user_id}")
    return int(user_id)

def load_chats_basic(user_id: int, chat_types: List[str] = None, unread_only: bool = None) -> Dict[str, Dict]:
    """
    –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API
    """
    print(f"üì• –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ (types: {chat_types}, unread_only: {unread_only})")
    
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    all_chats = {}
    offset = 0
    
    while offset <= MAX_OFFSET:
        params = {
            "limit": BATCH_SIZE,
            "offset": offset
        }
        
        if chat_types:
            params["chat_types"] = ",".join(chat_types)
        if unread_only is not None:
            params["unread_only"] = str(unread_only).lower()
        
        print(f"  üì° –ó–∞–ø—Ä–æ—Å: offset={offset}, limit={BATCH_SIZE}")
        
        try:
            resp = SESSION.get(
                f"{API_BASE}/messenger/v2/accounts/{user_id}/chats",
                headers=headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if resp.status_code != 200:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: {resp.status_code} - {resp.text[:200]}")
                break
            
            data = resp.json()
            chats = data.get("chats", [])
            
            if not chats:
                print(f"  üì≠ –ë–æ–ª—å—à–µ —á–∞—Ç–æ–≤ –Ω–µ—Ç (offset={offset})")
                break
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç—ã –≤ –æ–±—â–∏–π —Å–ª–æ–≤–∞—Ä—å
            for chat in chats:
                chat_id = chat.get("id")
                if chat_id:
                    all_chats[chat_id] = chat
            
            print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤, –≤—Å–µ–≥–æ: {len(all_chats)}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º –ª–∏–º–∏—Ç - –±–æ–ª—å—à–µ —á–∞—Ç–æ–≤ –Ω–µ—Ç
            if len(chats) < BATCH_SIZE:
                print(f"  üèÅ –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç - –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                break
            
            offset += BATCH_SIZE
            time.sleep(DELAY_BETWEEN_REQUESTS)
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            break
    
    print(f"üìä –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_chats)} —á–∞—Ç–æ–≤")
    return all_chats

def load_chats_by_item_ids(user_id: int, item_ids: List[int]) -> Dict[str, Dict]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º item_id (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω—ã)
    """
    print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ item_ids ({len(item_ids)} –ø–æ–∑–∏—Ü–∏–π)")
    
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    all_chats = {}
    
    # –†–∞–∑–±–∏–≤–∞–µ–º item_ids –Ω–∞ –ø–∞–∫–µ—Ç—ã –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö URL
    batch_size = 50
    for i in range(0, len(item_ids), batch_size):
        batch_item_ids = item_ids[i:i + batch_size]
        
        params = {
            "limit": BATCH_SIZE,
            "item_ids": ",".join(map(str, batch_item_ids))
        }
        
        print(f"  üì° –ó–∞–ø—Ä–æ—Å –¥–ª—è item_ids: {batch_item_ids[:5]}... ({len(batch_item_ids)} —à—Ç)")
        
        try:
            resp = SESSION.get(
                f"{API_BASE}/messenger/v2/accounts/{user_id}/chats",
                headers=headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if resp.status_code != 200:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: {resp.status_code}")
                continue
            
            data = resp.json()
            chats = data.get("chats", [])
            
            for chat in chats:
                chat_id = chat.get("id")
                if chat_id:
                    all_chats[chat_id] = chat
            
            print(f"  ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chats)} —á–∞—Ç–æ–≤ –¥–ª—è —ç—Ç–∏—Ö item_ids")
            time.sleep(DELAY_BETWEEN_REQUESTS)
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ item_ids –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(all_chats)} —á–∞—Ç–æ–≤")
    return all_chats

def load_chats_individual(user_id: int, chat_ids: List[str]) -> Dict[str, Dict]:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ –∏—Ö ID
    """
    print(f"üì• –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ ({len(chat_ids)} —à—Ç)")
    
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    loaded_chats = {}
    
    for i, chat_id in enumerate(chat_ids):
        print(f"  üì° –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–∞ {i+1}/{len(chat_ids)}: {chat_id}")
        
        try:
            resp = SESSION.get(
                f"{API_BASE}/messenger/v2/accounts/{user_id}/chats/{chat_id}",
                headers=headers,
                timeout=TIMEOUT
            )
            
            if resp.status_code == 200:
                chat_data = resp.json()
                loaded_chats[chat_id] = chat_data
                print(f"  ‚úÖ –ß–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω")
            elif resp.status_code == 404:
                print(f"  üì≠ –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞: {resp.status_code}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
            if (i + 1) % 100 == 0:
                print(f"  ‚è∏Ô∏è –ü–∞—É–∑–∞ –ø–æ—Å–ª–µ {i+1} –∑–∞–ø—Ä–æ—Å–æ–≤...")
                time.sleep(DELAY_BETWEEN_BATCHES)
            else:
                time.sleep(DELAY_BETWEEN_REQUESTS)
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    print(f"üìä –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {loaded_chats}/{len(chat_ids)} —á–∞—Ç–æ–≤")
    return loaded_chats

def collect_all_chats() -> Dict[str, Dict]:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —á–∞—Ç–æ–≤
    """
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Å–±–æ—Ä —á–∞—Ç–æ–≤ Avito")
    
    # –ü–æ–ª—É—á–∞–µ–º user_id
    user_id = get_user_id()
    
    all_chats = {}
    
    # === –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ ===
    print("\nüìã –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤")
    basic_chats = load_chats_basic(user_id)
    all_chats.update(basic_chats)
    print(f"–°–æ–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 1: {len(all_chats)} —á–∞—Ç–æ–≤")
    
    # === –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö ===
    print("\nüìã –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
    unread_chats = load_chats_basic(user_id, unread_only=True)
    new_unread = {k: v for k, v in unread_chats.items() if k not in all_chats}
    all_chats.update(new_unread)
    print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {len(new_unread)}")
    print(f"–°–æ–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 2: {len(all_chats)} —á–∞—Ç–æ–≤")
    
    # === –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤ ===
    print("\nüìã –°–¢–†–ê–¢–ï–ì–ò–Ø 3: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤")
    
    for chat_type in ["u2i", "u2u"]:
        print(f"\n  üìÇ –¢–∏–ø —á–∞—Ç–æ–≤: {chat_type}")
        typed_chats = load_chats_basic(user_id, chat_types=[chat_type])
        new_typed = {k: v for k, v in typed_chats.items() if k not in all_chats}
        all_chats.update(new_typed)
        print(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Ç–∏–ø–∞ {chat_type}: {len(new_typed)}")
    
    print(f"–°–æ–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 3: {len(all_chats)} —á–∞—Ç–æ–≤")
    
    # === –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ===
    print("\nüìã –°–¢–†–ê–¢–ï–ì–ò–Ø 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ (–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ + —Ç–∏–ø—ã)")
    
    for chat_type in ["u2i", "u2u"]:
        print(f"\n  üìÇ –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã —Ç–∏–ø–∞: {chat_type}")
        combo_chats = load_chats_basic(user_id, chat_types=[chat_type], unread_only=True)
        new_combo = {k: v for k, v in combo_chats.items() if k not in all_chats}
        all_chats.update(new_combo)
        print(f"  –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(new_combo)}")
    
    print(f"–°–æ–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ 4: {len(all_chats)} —á–∞—Ç–æ–≤")
    
    # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ===
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ item_ids, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:
    # item_ids = [...]  # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö ID –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    # item_chats = load_chats_by_item_ids(user_id, item_ids)
    # all_chats.update(item_chats)
    
    # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ chat_ids, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å:
    # missing_chat_ids = [...]  # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö chat_id
    # individual_chats = load_chats_individual(user_id, missing_chat_ids)
    # all_chats.update(individual_chats)
    
    return all_chats

def save_chats_result(chats_dict: Dict[str, Dict]) -> str:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–∞–π–ª
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"avito_chats_advanced_{timestamp}.json"
    
    result_data = {
        "metadata": {
            "collected_at": datetime.now().isoformat(),
            "total_chats": len(chats_dict),
            "collection_method": "advanced_multi_strategy",
            "script_version": "advanced_collector_v1"
        },
        "chats": chats_dict
    }
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(result_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
    return filename

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
        all_chats = collect_all_chats()
        
        print(f"\nüéâ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢")
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(all_chats)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        filename = save_chats_result(all_chats)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —á–∞—Ç–æ–≤
        if all_chats:
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö chat_id:")
            for i, chat_id in enumerate(list(all_chats.keys())[:5]):
                print(f"  {i+1}. {chat_id}")
            if len(all_chats) > 5:
                print(f"  ... –∏ –µ—â–µ {len(all_chats) - 5} —á–∞—Ç–æ–≤")
        
        print(f"\n‚úÖ –°–±–æ—Ä —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —á–∞—Ç–æ–≤: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()