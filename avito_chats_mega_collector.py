# avito_chats_mega_collector.py
# -*- coding: utf-8 -*-
"""
–ú–ï–ì–ê-—Å–±–æ—Ä—â–∏–∫ —á–∞—Ç–æ–≤ Avito —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤
"""

import requests
import json
import time
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional, Set
import threading
from concurrent.futures import ThreadPoolExecutor, as_completed

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
API_BASE = "https://api.avito.ru"
TIMEOUT = 30

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
CLIENT_ID = "Dm4ruLMEr9MFsV72dN95"
CLIENT_SECRET = "f73lNoAJLzuqwoGtVaMnByhQfSlwcyIN_m7wyOeT"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
BATCH_SIZE = 100
MAX_OFFSET = 1000
DELAY_BETWEEN_REQUESTS = 0.05
DELAY_BETWEEN_BATCHES = 1.0

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ï–°–°–ò–ò ===
SESSION = requests.Session()
SESSION.headers.update({
    "User-Agent": "Avito Mega Chat Collector / Python",
    "Accept": "application/json"
})

class Token:
    def __init__(self) -> None:
        self._token: str | None = None
        self._exp: float = 0.0

    def _refresh(self) -> None:
        print("üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ access_token...")
        r = SESSION.post(
            f"{API_BASE}/token",
            data={
                "grant_type": "client_credentials",
                "client_id": CLIENT_ID,
                "client_secret": CLIENT_SECRET
            },
            timeout=TIMEOUT
        )
        if r.status_code != 200:
            raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {r.status_code} {r.text}")
        data = r.json()
        self._token = data["access_token"]
        self._exp = time.time() + data.get("expires_in", 3600) - 60
        print(f"‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω")

    def get(self) -> str:
        if not self._token or time.time() >= self._exp:
            self._refresh()
        return self._token

_tok = Token()

def get_user_id() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    resp = SESSION.get(f"{API_BASE}/core/v1/accounts/self", headers=headers, timeout=TIMEOUT)
    if resp.status_code != 200:
        raise RuntimeError(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user_id: {resp.status_code} {resp.text}")
    
    data = resp.json()
    user_id = data.get("id") or data.get("user_id")
    if not user_id:
        raise RuntimeError(f"user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {data}")
    
    print(f"üë§ User ID: {user_id}")
    return int(user_id)

def load_chats_with_params(user_id: int, **params) -> Dict[str, Dict]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å –ª—é–±—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    all_chats = {}
    offset = 0
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params.setdefault("limit", BATCH_SIZE)
    
    while offset <= MAX_OFFSET:
        params["offset"] = offset
        
        try:
            resp = SESSION.get(
                f"{API_BASE}/messenger/v2/accounts/{user_id}/chats",
                headers=headers,
                params=params,
                timeout=TIMEOUT
            )
            
            if resp.status_code != 200:
                break
            
            data = resp.json()
            chats = data.get("chats", [])
            
            if not chats:
                break
            
            for chat in chats:
                chat_id = chat.get("id")
                if chat_id:
                    all_chats[chat_id] = chat
            
            if len(chats) < BATCH_SIZE:
                break
            
            offset += BATCH_SIZE
            time.sleep(DELAY_BETWEEN_REQUESTS)
            
        except Exception as e:
            break
    
    return all_chats

def load_chats_time_based(user_id: int) -> Dict[str, Dict]:
    """
    –°–¢–†–ê–¢–ï–ì–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã API
    """
    print("üìÖ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏")
    
    all_chats = {}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    time_ranges = [
        {"created_after": "2024-01-01"},
        {"created_before": "2025-12-31"},
        {"updated_after": "2024-01-01"},
        {"updated_before": "2025-12-31"},
    ]
    
    for time_params in time_ranges:
        try:
            chats = load_chats_with_params(user_id, **time_params)
            new_chats = {k: v for k, v in chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            print(f"  ‚è∞ {time_params}: +{len(new_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
        except:
            pass
    
    return all_chats

def load_chats_sorting_based(user_id: int) -> Dict[str, Dict]:
    """
    –°–¢–†–ê–¢–ï–ì–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞–º–∏
    """
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞–º–∏")
    
    all_chats = {}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    sort_options = [
        {"sort": "created_asc"},
        {"sort": "created_desc"},
        {"sort": "updated_asc"},
        {"sort": "updated_desc"},
        {"order": "asc"},
        {"order": "desc"},
        {"sort_by": "created"},
        {"sort_by": "updated"},
    ]
    
    for sort_params in sort_options:
        try:
            chats = load_chats_with_params(user_id, **sort_params)
            new_chats = {k: v for k, v in chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            print(f"  üîÑ {sort_params}: +{len(new_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
        except:
            pass
    
    return all_chats

def load_chats_status_based(user_id: int) -> Dict[str, Dict]:
    """
    –°–¢–†–ê–¢–ï–ì–ò–Ø: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —á–∞—Ç–æ–≤
    """
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
    
    all_chats = {}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    status_options = [
        {"status": "active"},
        {"status": "archived"},
        {"status": "deleted"},
        {"status": "read"},
        {"status": "unread"},
        {"read": "true"},
        {"read": "false"},
        {"archived": "true"},
        {"archived": "false"},
        {"active": "true"},
        {"active": "false"},
    ]
    
    for status_params in status_options:
        try:
            chats = load_chats_with_params(user_id, **status_params)
            new_chats = {k: v for k, v in chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            print(f"  üìä {status_params}: +{len(new_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
        except:
            pass
    
    return all_chats

def load_chats_pagination_tricks(user_id: int) -> Dict[str, Dict]:
    """
    –°–¢–†–ê–¢–ï–ì–ò–Ø: –•–∏—Ç—Ä–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    print("üéØ –•–∏—Ç—Ä–æ—Å—Ç–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π")
    
    all_chats = {}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü
    for limit in [1, 5, 25, 50, 150, 200]:
        try:
            chats = load_chats_with_params(user_id, limit=limit)
            new_chats = {k: v for k, v in chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            print(f"  üìÑ limit={limit}: +{len(new_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
        except:
            pass
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å —Ä–∞–∑–Ω—ã—Ö offset
    for start_offset in [0, 50, 99, 999, 1001]:
        try:
            chats = load_chats_with_params(user_id, offset=start_offset, limit=50)
            new_chats = {k: v for k, v in chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            print(f"  üî¢ start_offset={start_offset}: +{len(new_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
        except:
            pass
    
    return all_chats

def try_messenger_v1_api(user_id: int) -> Dict[str, Dict]:
    """
    –°–¢–†–ê–¢–ï–ì–ò–Ø: –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—ã–π API v1
    """
    print("üîô –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Messenger API v1")
    
    token = _tok.get()
    headers = {"Authorization": f"Bearer {token}"}
    
    all_chats = {}
    
    try:
        # –ü—Ä–æ–±—É–µ–º v1 API
        resp = SESSION.get(
            f"{API_BASE}/messenger/v1/accounts/{user_id}/chats",
            headers=headers,
            params={"limit": 100},
            timeout=TIMEOUT
        )
        
        if resp.status_code == 200:
            data = resp.json()
            chats = data.get("chats", [])
            
            for chat in chats:
                chat_id = chat.get("id")
                if chat_id:
                    all_chats[chat_id] = chat
            
            print(f"  üìû API v1: –ø–æ–ª—É—á–µ–Ω–æ {len(all_chats)} —á–∞—Ç–æ–≤")
        else:
            print(f"  üìû API v1: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({resp.status_code})")
            
    except Exception as e:
        print(f"  üìû API v1: –æ—à–∏–±–∫–∞ ({e})")
    
    return all_chats

def brute_force_parameters(user_id: int) -> Dict[str, Dict]:
    """
    –°–¢–†–ê–¢–ï–ì–ò–Ø: –ë—Ä—É—Ç—Ñ–æ—Ä—Å —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API
    """
    print("üí• –ë—Ä—É—Ç—Ñ–æ—Ä—Å —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API")
    
    all_chats = {}
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞
    param_tests = [
        {"include_archived": "true"},
        {"include_deleted": "true"},
        {"include_hidden": "true"},
        {"show_all": "true"},
        {"all": "true"},
        {"full": "true"},
        {"detailed": "true"},
        {"extended": "true"},
        {"with_messages": "true"},
        {"with_context": "true"},
        {"include_system": "true"},
        {"include_auto": "true"},
        {"type": "all"},
        {"category": "all"},
        {"filter": "none"},
        {"mode": "all"},
        {"scope": "all"},
    ]
    
    for test_params in param_tests:
        try:
            chats = load_chats_with_params(user_id, **test_params)
            new_chats = {k: v for k, v in chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            if new_chats:
                print(f"  üí• {test_params}: +{len(new_chats)} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ ‚ú®")
        except:
            pass
    
    return all_chats

def mega_collect_chats() -> Dict[str, Dict]:
    """
    –ú–ï–ì–ê-—Å–±–æ—Ä—â–∏–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —á–∞—Ç–æ–≤
    """
    print("üöÄ –ú–ï–ì–ê-–°–ë–û–†–©–ò–ö –ß–ê–¢–û–í –ó–ê–ü–£–©–ï–ù!")
    
    user_id = get_user_id()
    all_chats = {}
    
    strategies = [
        ("–ë–∞–∑–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞", lambda: load_chats_with_params(user_id)),
        ("–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ", lambda: load_chats_with_params(user_id, unread_only="true")),
        ("–¢–∏–ø u2i", lambda: load_chats_with_params(user_id, chat_types="u2i")),
        ("–¢–∏–ø u2u", lambda: load_chats_with_params(user_id, chat_types="u2u")),
        ("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã", lambda: load_chats_time_based(user_id)),
        ("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏", lambda: load_chats_sorting_based(user_id)),
        ("–°—Ç–∞—Ç—É—Å—ã", lambda: load_chats_status_based(user_id)),
        ("–ü–∞–≥–∏–Ω–∞—Ü–∏—è", lambda: load_chats_pagination_tricks(user_id)),
        ("API v1", lambda: try_messenger_v1_api(user_id)),
        ("–ë—Ä—É—Ç—Ñ–æ—Ä—Å", lambda: brute_force_parameters(user_id)),
    ]
    
    for strategy_name, strategy_func in strategies:
        print(f"\nüìã –°–¢–†–ê–¢–ï–ì–ò–Ø: {strategy_name}")
        try:
            strategy_chats = strategy_func()
            new_chats = {k: v for k, v in strategy_chats.items() if k not in all_chats}
            all_chats.update(new_chats)
            print(f"‚úÖ {strategy_name}: +{len(new_chats)} –Ω–æ–≤—ã—Ö, –≤—Å–µ–≥–æ: {len(all_chats)}")
        except Exception as e:
            print(f"‚ùå {strategy_name}: –æ—à–∏–±–∫–∞ - {e}")
    
    return all_chats

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ú–ï–ì–ê-—Å–±–æ—Ä—â–∏–∫–∞
    """
    try:
        # –°–æ–±–∏—Ä–∞–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Ç—ã
        all_chats = mega_collect_chats()
        
        print(f"\nüéâ –ú–ï–ì–ê-–†–ï–ó–£–õ–¨–¢–ê–¢")
        print(f"üìä –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(all_chats)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"avito_chats_MEGA_{timestamp}.json"
        
        result_data = {
            "metadata": {
                "collected_at": datetime.now().isoformat(),
                "total_chats": len(all_chats),
                "collection_method": "MEGA_EXTREME_COLLECTOR",
                "script_version": "mega_v1"
            },
            "chats": all_chats
        }
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ú–ï–ì–ê-—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {filename}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
        if all_chats:
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö chat_id:")
            for i, chat_id in enumerate(list(all_chats.keys())[:10]):
                print(f"  {i+1:2d}. {chat_id}")
            if len(all_chats) > 10:
                print(f"  ... –∏ –µ—â–µ {len(all_chats) - 10} —á–∞—Ç–æ–≤")
        
        print(f"\n‚úÖ –ú–ï–ì–ê-—Å–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"\n‚ùå –ú–ï–ì–ê-–æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()