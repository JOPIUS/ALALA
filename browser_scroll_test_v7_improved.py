# browser_scroll_test_v7_improved.py
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Avito —Ä–µ–∑—é–º–µ v7
–§–æ–∫—É—Å –Ω–∞ —Ç–æ—á–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–∞—Ö –∏ –æ—Ç–ª–∞–¥–∫–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
"""

from pathlib import Path
from datetime import datetime
from playwright.sync_api import sync_playwright, Error as PwError
import time
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USER_DATA_DIR = Path("./avito_browser_profile").resolve()
TARGET_URL = "https://www.avito.ru/profile/paid-cvs"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
MAX_TOTAL_SCROLL_SEC = 180  
QUIET_MS = 1000             
STABLE_GROWTH_ROUNDS = 15   
NAV_TIMEOUT = 30_000        

# –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
CARD_SELECTORS = [
    '[data-marker="cv-snippet"]',
    '.styles-module-root-_1qzTi',
    '[class*="cv-snippet"]',
    '[class*="resume-card"]',
    '.styles-module-root-RA_y4',
    '.styles-module-container-',
    'article',
    '[class*="styles-module-root"]'
]

# –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
DATA_SELECTORS = {
    'name': [
        '[data-marker="cv-snippet-name"]',
        '.styles-module-title-',
        '[class*="title"]',
        'h3',
        '.text-text-LurtD.text-size-s-BxGpL',
        '.text-text-LurtD.text-size-s-BxGpL.text-color-black-ohrjA',
        '[class*="name"]',
        '[class*="title"]'
    ],
    'link': [
        'a[href*="/resume/"]',
        'a[href*="/cv/"]',
        '[data-marker="cv-snippet-link"]',
        '.styles-module-link-',
        'a'
    ],
    'salary': [
        '[data-marker="cv-snippet-salary"]',
        '.styles-module-salary-',
        '[class*="salary"]',
        '.text-text-LurtD.text-size-s-BxGpL.text-color-green-zxyRV',
        '[class*="price"]'
    ],
    'location': [
        '[data-marker="cv-snippet-location"]',
        '.styles-module-location-',
        '[class*="location"]',
        '.text-text-LurtD.text-size-s-BxGpL.text-color-blue-'
    ],
    'date': [
        '[data-marker="cv-snippet-date"]',
        '.styles-module-date-',
        '[class*="date"]',
        '.text-text-LurtD.text-size-xs-'
    ]
}

def log_with_time(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    print(f"üïê [{datetime.now().strftime('%H:%M:%S')}] {msg}")

def analyze_page_structure(page):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
    log_with_time("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã...")
    
    analysis_js = """
    () => {
        const analysis = {
            total_elements: document.querySelectorAll('*').length,
            possible_cards: [],
            data_attributes: new Set(),
            class_patterns: new Set()
        };
        
        // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ
        const cardSelectors = [
            '[data-marker*="cv"]',
            '[data-marker*="resume"]',
            '[class*="cv"]',
            '[class*="resume"]',
            '[class*="snippet"]',
            '[class*="card"]',
            'article',
            '[class*="styles-module-root"]'
        ];
        
        cardSelectors.forEach(selector => {
            try {
                const elements = document.querySelectorAll(selector);
                if (elements.length > 0) {
                    analysis.possible_cards.push({
                        selector: selector,
                        count: elements.length,
                        first_element_html: elements[0].outerHTML.substring(0, 200) + '...'
                    });
                }
            } catch(e) {}
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º data-marker –∞—Ç—Ä–∏–±—É—Ç—ã
        document.querySelectorAll('[data-marker]').forEach(el => {
            analysis.data_attributes.add(el.getAttribute('data-marker'));
        });
        
        // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–ª–∞—Å—Å–æ–≤
        document.querySelectorAll('[class*="styles-module"]').forEach(el => {
            el.className.split(' ').forEach(cls => {
                if (cls.includes('styles-module')) {
                    analysis.class_patterns.add(cls);
                }
            });
        });
        
        // –ò—â–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–º–µ–Ω–∞–º–∏
        const textElements = Array.from(document.querySelectorAll('*')).filter(el => {
            const text = el.textContent?.trim();
            return text && text.length > 5 && text.length < 100 && 
                   !text.includes('‚ÇΩ') && !text.includes('—Ä—É–±') &&
                   !text.includes('–≥–æ—Ä–æ–¥') && !text.includes('–æ–±–ª–∞—Å—Ç—å');
        });
        
        return {
            ...analysis,
            data_attributes: Array.from(analysis.data_attributes),
            class_patterns: Array.from(analysis.class_patterns).slice(0, 20),
            sample_text_elements: textElements.slice(0, 10).map(el => ({
                tag: el.tagName,
                text: el.textContent?.trim(),
                classes: el.className
            }))
        };
    }
    """
    
    try:
        analysis = page.evaluate(analysis_js)
        log_with_time(f"üìä –ù–∞–π–¥–µ–Ω–æ {analysis['total_elements']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        log_with_time(f"üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏:")
        
        for card in analysis['possible_cards']:
            log_with_time(f"   {card['selector']}: {card['count']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        if analysis['data_attributes']:
            log_with_time(f"üè∑Ô∏è data-marker –∞—Ç—Ä–∏–±—É—Ç—ã: {analysis['data_attributes'][:10]}")
        
        if analysis['class_patterns']:
            log_with_time(f"üé® –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∫–ª–∞—Å—Å–æ–≤: {analysis['class_patterns'][:10]}")
            
        return analysis
    except Exception as e:
        log_with_time(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {}

def find_best_selector(page, selectors_list, element_type="—ç–ª–µ–º–µ–Ω—Ç"):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
    best_selector = None
    max_count = 0
    
    for selector in selectors_list:
        try:
            count = page.evaluate(f'() => document.querySelectorAll(\'{selector}\').length')
            if count > max_count:
                max_count = count
                best_selector = selector
        except:
            continue
    
    if best_selector:
        log_with_time(f"‚úÖ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è {element_type}: '{best_selector}' ({max_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
    else:
        log_with_time(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è {element_type}")
    
    return best_selector

def count_cards(page):
    """–ü–æ–¥—Å—á–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞"""
    best_selector = find_best_selector(page, CARD_SELECTORS, "–∫–∞—Ä—Ç–æ—á–µ–∫")
    if best_selector:
        try:
            return page.evaluate(f'() => document.querySelectorAll(\'{best_selector}\').length')
        except:
            pass
    return 0

def wait_for_network_idle(page, timeout_ms=3000):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        page.wait_for_load_state("networkidle", timeout=timeout_ms)
        return True
    except Exception:
        return False

def detect_end_of_page(page):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        end_indicators = page.evaluate("""
            () => {
                const indicators = {
                    footer_visible: false,
                    no_more_text: false,
                    pagination_end: false,
                    scroll_at_bottom: false,
                    empty_space: false,
                    active_load_buttons: 0
                };
                
                // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
                const moreButtons = document.querySelectorAll('button, a, [role="button"]');
                for (const btn of moreButtons) {
                    const text = btn.textContent.toLowerCase().trim();
                    if (text.includes('–µ—â—ë') && btn.offsetParent !== null && 
                        !btn.disabled && !btn.getAttribute('aria-disabled')) {
                        indicators.active_load_buttons++;
                    }
                }
                
                // –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ü–∞
                const endTexts = [
                    '–±–æ–ª—å—à–µ —Ä–µ–∑—é–º–µ –Ω–µ—Ç', '–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞', '–≤—Å–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                    '–±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å',
                    '–ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —Ä–µ–∑—é–º–µ', '–∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ —Ä–µ–∑—é–º–µ'
                ];
                
                const bodyText = document.body.textContent.toLowerCase();
                indicators.no_more_text = endTexts.some(text => bodyText.includes(text));
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
                const scrollTop = window.pageYOffset;
                const scrollHeight = document.documentElement.scrollHeight;
                const clientHeight = window.innerHeight;
                
                indicators.scroll_at_bottom = (scrollTop + clientHeight + 100) >= scrollHeight;
                
                return indicators;
            }
        """)
        
        return end_indicators
    except Exception as e:
        log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return {"active_load_buttons": 999, "no_more_text": False, "scroll_at_bottom": False}

def smart_scroll_to_load_all(page, target_count=None, max_time_sec=180):
    """
    –£–ú–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    """
    log_with_time(f"üöÄ –£–ú–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ v7 (—Ü–µ–ª—å: {target_count or '–í–°–ï'}, –ª–∏–º–∏—Ç: {max_time_sec}—Å)")
    
    start_time = time.time()
    deadline = start_time + max_time_sec
    
    last_count = 0
    last_height = 0
    no_change_count = 0
    iteration = 0
    last_log_time = start_time
    
    initial_count = count_cards(page)
    initial_height = page.evaluate("document.documentElement.scrollHeight")
    log_with_time(f"üìã –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {initial_count} —Ä–µ–∑—é–º–µ, –≤—ã—Å–æ—Ç–∞: {initial_height}px")
    
    while time.time() < deadline:
        iteration += 1
        current_count = count_cards(page)
        current_height = page.evaluate("document.documentElement.scrollHeight")
        current_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if current_count > last_count or current_height > last_height or (current_time - last_log_time) > 5:
            if current_count > last_count or current_height > last_height:
                count_progress = current_count - last_count
                height_progress = current_height - last_height
                log_with_time(f"üìà +{count_progress} = {current_count} —Ä–µ–∑—é–º–µ, –≤—ã—Å–æ—Ç–∞: {current_height}px (+{height_progress}) [–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}]")
                last_count = current_count
                last_height = current_height
                no_change_count = 0
            else:
                log_with_time(f"‚è≥ {current_count} —Ä–µ–∑—é–º–µ, –≤—ã—Å–æ—Ç–∞: {current_height}px [–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}, —Å—Ç–∞–±–∏–ª—å–Ω–æ: {no_change_count}]")
                no_change_count += 1
            last_log_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
            if target_count and current_count >= target_count:
                log_with_time(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: {current_count} >= {target_count}")
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        end_indicators = detect_end_of_page(page)
        if (end_indicators['no_more_text'] or 
            (end_indicators['scroll_at_bottom'] and end_indicators['active_load_buttons'] == 0)):
            log_with_time("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            break
        
        try:
            # –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            page.evaluate("""
                window.scrollBy({
                    top: window.innerHeight * 0.8,
                    behavior: 'smooth'
                });
            """)
            
            time.sleep(0.3)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if iteration % 5 == 0:
                page.keyboard.press("PageDown")
                time.sleep(0.2)
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π "–≤—Å—Ç—Ä—è—Ö–∏–≤–∞—é—â–∏–π" —Å–∫—Ä–æ–ª–ª
            if no_change_count >= 3:
                log_with_time("üí´ –í—Å—Ç—Ä—è—Å–∫–∞: —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑")
                page.evaluate("window.scrollBy(0, -500)")
                time.sleep(0.3)
                page.evaluate("window.scrollBy(0, 1000)")
                time.sleep(0.5)
                no_change_count = 0
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–∏
            if iteration % 10 == 0:
                wait_for_network_idle(page, timeout_ms=1000)
                
        except Exception as e:
            log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
            time.sleep(0.5)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞–≤–∏—Å–∞–Ω–∏—è
        if no_change_count >= STABLE_GROWTH_ROUNDS:
            log_with_time(f"üîÑ {no_change_count} –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã")
            
            try:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
                clicked = page.evaluate("""
                    () => {
                        const buttons = document.querySelectorAll('button, a, [role="button"]');
                        let clicked = false;
                        for (const btn of buttons) {
                            const text = btn.textContent.toLowerCase();
                            if (text.includes('–µ—â—ë') || text.includes('–∑–∞–≥—Ä—É–∑') || text.includes('–ø–æ–∫–∞–∑–∞—Ç—å')) {
                                try {
                                    btn.click();
                                    clicked = true;
                                    console.log('–ö–ª–∏–∫–Ω—É–ª:', text);
                                    break;
                                } catch(e) {}
                            }
                        }
                        return clicked;
                    }
                """)
                
                if clicked:
                    log_with_time("‚úÖ –ö–ª–∏–∫–Ω—É–ª –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏")
                    time.sleep(2.0)
                
                no_change_count = 0
                
            except Exception as e:
                log_with_time(f"‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏: {e}")
    
    final_count = count_cards(page)
    total_elapsed = time.time() - start_time
    
    log_with_time(f"üèÅ –£–ú–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    log_with_time(f"üìä –ò—Ç–æ–≥–æ: {final_count} —Ä–µ–∑—é–º–µ –∑–∞ {total_elapsed:.1f}—Å ({iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
    log_with_time(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_count/total_elapsed:.1f} —Ä–µ–∑—é–º–µ/—Å–µ–∫")
    
    return final_count

def extract_resume_data_smart(page):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–±–æ—Ä–æ–º —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤"""
    log_with_time("üìä –£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ...")
    
    # –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    best_card_selector = find_best_selector(page, CARD_SELECTORS, "–∫–∞—Ä—Ç–æ—á–µ–∫")
    if not best_card_selector:
        log_with_time("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫")
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    best_data_selectors = {}
    for data_type, selectors in DATA_SELECTORS.items():
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
        test_js = f"""
        () => {{
            const firstCard = document.querySelector('{best_card_selector}');
            if (!firstCard) return 0;
            
            let maxCount = 0;
            let bestSelector = null;
            
            {json.dumps(selectors)}.forEach(selector => {{
                try {{
                    const elements = firstCard.querySelectorAll(selector);
                    if (elements.length > maxCount) {{
                        maxCount = elements.length;
                        bestSelector = selector;
                    }}
                }} catch(e) {{}}
            }});
            
            return {{selector: bestSelector, count: maxCount}};
        }}
        """
        
        try:
            result = page.evaluate(test_js)
            if result['selector'] and result['count'] > 0:
                best_data_selectors[data_type] = result['selector']
                log_with_time(f"‚úÖ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è {data_type}: '{result['selector']}'")
            else:
                log_with_time(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è {data_type}")
        except Exception as e:
            log_with_time(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è {data_type}: {e}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
    extract_js = f"""
    () => {{
        const cards = document.querySelectorAll('{best_card_selector}');
        const results = [];
        const selectors = {json.dumps(best_data_selectors)};
        
        cards.forEach((card, index) => {{
            try {{
                const data = {{
                    index: index + 1,
                    name: '',
                    link: '',
                    resume_id: '',
                    salary: '',
                    location: '',
                    date: '',
                    visible: card.getBoundingClientRect().top < window.innerHeight
                }};
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
                for (const [dataType, selector] of Object.entries(selectors)) {{
                    try {{
                        if (dataType === 'link') {{
                            const linkEl = card.querySelector(selector);
                            if (linkEl) {{
                                data.link = linkEl.href || linkEl.getAttribute('href') || '';
                                const match = data.link.match(/resume\\/([^?\\/]+)/);
                                data.resume_id = match ? match[1] : '';
                            }}
                        }} else {{
                            const el = card.querySelector(selector);
                            if (el) {{
                                data[dataType] = el.textContent?.trim() || '';
                            }}
                        }}
                    }} catch(e) {{
                        console.error(`Error extracting ${{dataType}}:`, e);
                    }}
                }}
                
                // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã–µ, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                if (!data.name) {{
                    // –ò—â–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º–µ–Ω–µ–º
                    const textElements = card.querySelectorAll('h1, h2, h3, h4, h5, h6, a, span, div');
                    for (const el of textElements) {{
                        const text = el.textContent?.trim();
                        if (text && text.length > 5 && text.length < 100 && 
                            !text.includes('‚ÇΩ') && !text.includes('—Ä—É–±') &&
                            !text.match(/\\d{{2}}\\.\\d{{2}}\\.\\d{{4}}/)) {{
                            data.name = text;
                            break;
                        }}
                    }}
                }}
                
                if (!data.link) {{
                    // –ò—â–µ–º –ª—é–±—É—é —Å—Å—ã–ª–∫—É
                    const linkEl = card.querySelector('a[href]');
                    if (linkEl) {{
                        data.link = linkEl.href;
                        const match = data.link.match(/resume\\/([^?\\/]+)/);
                        data.resume_id = match ? match[1] : '';
                    }}
                }}
                
                results.push(data);
            }} catch (e) {{
                console.error('Error processing card:', e);
                results.push({{
                    index: index + 1,
                    name: '',
                    link: '',
                    resume_id: '',
                    salary: '',
                    location: '',
                    date: '',
                    visible: false,
                    error: e.message
                }});
            }}
        }});
        
        return results;
    }}
    """
    
    try:
        data = page.evaluate(extract_js)
        valid_data = [item for item in data if item.get('name') or item.get('link')]
        log_with_time(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π, {len(valid_data)} —Å –¥–∞–Ω–Ω—ã–º–∏")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if valid_data:
            sample = valid_data[0]
            log_with_time(f"üîç –ü—Ä–∏–º–µ—Ä: {sample.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')[:30]}... | {sample.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')[:50]}...")
        
        return data
    except Exception as e:
        log_with_time(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def test_browser_performance_v7():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è v7 - —É–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ"""
    log_with_time("üé≠ –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ v7")
    
    USER_DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    with sync_playwright() as p:
        context = p.chromium.launch_persistent_context(
            user_data_dir=str(USER_DATA_DIR),
            headless=False,
            viewport={"width": 1200, "height": 800},
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-web-security",
                "--blink-settings=imagesEnabled=false",
                "--disable-images",
                "--force-device-scale-factor=0.6",
                "--window-size=1200,800"
            ],
        )
        
        context.set_default_timeout(NAV_TIMEOUT)
        page = context.new_page()
        page.add_init_script("document.body.style.zoom = '0.6'")
        
        try:
            log_with_time("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito...")
            page.goto(TARGET_URL, wait_until="domcontentloaded")
            
            input("\nüîë –í–æ–π–¥–∏—Ç–µ –≤ Avito –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...\n")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            analyze_page_structure(page)
            
            # –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç
            initial_count = count_cards(page)
            log_with_time(f"üìã –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—é–º–µ: {initial_count}")
            
            # –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            log_with_time(f"\n{'='*60}")
            log_with_time(f"üß™ –¢–ï–°–¢ v7: —É–º–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ")
            log_with_time(f"{'='*60}")
            
            start_time = time.time()
            
            # –£–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
            final_count = smart_scroll_to_load_all(page, target_count=None)
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = extract_resume_data_smart(page)
            
            elapsed = time.time() - start_time
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
            log_with_time(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}—Å")
            log_with_time(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—é–º–µ: {final_count}")
            log_with_time(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
            log_with_time(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_count/elapsed:.1f} —Ä–µ–∑—é–º–µ/—Å–µ–∫")
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
            valid_names = sum(1 for item in data if item.get('name'))
            valid_links = sum(1 for item in data if item.get('link'))
            
            log_with_time(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
            log_with_time(f"   –ò–º–µ–Ω–∞: {valid_names}/{len(data)} ({valid_names/len(data)*100:.1f}%)")
            log_with_time(f"   –°—Å—ã–ª–∫–∏: {valid_links}/{len(data)} ({valid_links/len(data)*100:.1f}%)")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"browser_test_v7_smart_{timestamp}.json"
            
            result = {
                "test_params": {
                    "version": "v7_smart",
                    "timestamp": timestamp,
                    "duration_seconds": elapsed
                },
                "performance": {
                    "cards_loaded": final_count,
                    "data_extracted": len(data),
                    "speed_per_second": final_count/elapsed,
                    "data_quality": {
                        "valid_names": valid_names,
                        "valid_links": valid_links,
                        "name_percentage": valid_names/len(data)*100 if data else 0,
                        "link_percentage": valid_links/len(data)*100 if data else 0
                    }
                },
                "sample_data": data[:10],  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                "full_data": data  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            log_with_time(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            log_with_time(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            log_with_time("üèÅ –£–º–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_browser_performance_v7()