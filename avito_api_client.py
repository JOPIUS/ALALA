#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –ê–≤–∏—Ç–æ
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫—É–ø–ª–µ–Ω–Ω—ã–º —Ä–µ–∑—é–º–µ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
"""
import requests
import json
from datetime import datetime

class AvitoAPIClient:
    def __init__(self, client_id, client_secret):
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = None
        self.base_url = "https://api.avito.ru"
        
    def get_access_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token"""
        url = f"{self.base_url}/token"
        data = {
            'grant_type': 'client_credentials',
            'client_id': self.client_id,
            'client_secret': self.client_secret
        }
        
        response = requests.post(url, data=data)
        if response.status_code == 200:
            result = response.json()
            self.access_token = result['access_token']
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.access_token[:20]}...")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
            return False
    
    def get_headers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json'
        }
    
    def get_account_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ"""
        url = f"{self.base_url}/core/v1/accounts/self"
        response = requests.get(url, headers=self.get_headers())
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: {response.status_code} - {response.text}")
            return None
    
    def try_endpoints(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö endpoints"""
        endpoints = [
            "/messenger/v1/accounts/self/chats",
            "/messenger/v2/accounts/self/chats", 
            "/messenger/chats",
            "/job/v1/applications",
            "/job/v1/resumes",
            "/job/v1/vacancies",
            "/job/applications",
            "/job/resumes",
            "/core/v1/accounts/self/operations",
            "/core/v1/accounts/self/balance",
            "/core/v1/operations",
            "/user/operations",
            "/user/balance"
        ]
        
        working_endpoints = []
        
        for endpoint in endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                response = requests.get(url, headers=self.get_headers())
                print(f"üîç {endpoint}: {response.status_code}")
                
                if response.status_code == 200:
                    working_endpoints.append(endpoint)
                    print(f"‚úÖ {endpoint} - –†–ê–ë–û–¢–ê–ï–¢")
                    try:
                        data = response.json()
                        print(f"   –î–∞–Ω–Ω—ã–µ: {json.dumps(data, ensure_ascii=False)[:200]}...")
                    except:
                        print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}...")
                elif response.status_code == 401:
                    print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                elif response.status_code == 403:
                    print(f"‚ùå {endpoint} - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif response.status_code == 404:
                    print(f"‚ö†Ô∏è {endpoint} - –ù–µ –Ω–∞–π–¥–µ–Ω")
                else:
                    print(f"‚ùì {endpoint} - {response.status_code}: {response.text[:100]}")
                    
            except Exception as e:
                print(f"üí• {endpoint} - –û—à–∏–±–∫–∞: {e}")
                
        return working_endpoints
    
    def get_messenger_chats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
        urls = [
            f"{self.base_url}/messenger/v1/accounts/self/chats",
            f"{self.base_url}/messenger/v2/accounts/self/chats",
            f"{self.base_url}/messenger/chats"
        ]
        
        for url in urls:
            try:
                response = requests.get(url, headers=self.get_headers())
                if response.status_code == 200:
                    print(f"‚úÖ –ß–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑: {url}")
                    return response.json()
                else:
                    print(f"‚ùå {url}: {response.status_code} - {response.text}")
            except Exception as e:
                print(f"üí• –û—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
        
        return None
    
    def analyze_unread_resumes(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        print("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        account_info = self.get_account_info()
        if account_info:
            print(f"üë§ –ê–∫–∫–∞—É–Ω—Ç: {account_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"üìß Email: {account_info.get('email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º endpoints
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö endpoints...")
        working_endpoints = self.try_endpoints()
        
        if working_endpoints:
            print(f"\n‚úÖ –†–∞–±–æ—á–∏–µ endpoints: {working_endpoints}")
        else:
            print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–∏—Ö endpoints –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã
        print("\nüì± –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤...")
        chats = self.get_messenger_chats()
        
        if chats:
            print(f"üí¨ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats) if isinstance(chats, list) else 'N/A'}")
            return chats
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã")
            return None

def main():
    # –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    CLIENT_ID = "pEm43bT2JX47aeb8OxNV"
    CLIENT_SECRET = "pURVGURY6Mt95xTPxrTHJ_SpzL7sBPNRfTt7qQkw"
    
    print("üöÄ –ó–∞–ø—É—Å–∫ Avito API Client")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = AvitoAPIClient(CLIENT_ID, CLIENT_SECRET)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    if not client.get_access_token():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
    result = client.analyze_unread_resumes()
    
    if result:
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(json.dumps(result, ensure_ascii=False, indent=2))
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—é–º–µ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("- API endpoints –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        print("- –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–º–µ—Å—Ç–æ client credentials")
        print("- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—É –∏ —Ä–µ–∑—é–º–µ")

if __name__ == "__main__":
    main()