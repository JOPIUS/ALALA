#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö endpoints –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ –∏ —Ä–µ–∑—é–º–µ –ê–≤–∏—Ç–æ
"""
import requests
import json
from datetime import datetime

class AvitoEndpointExplorer:
    def __init__(self, client_id, client_secret):
        self.client_id = client_id
        self.client_secret = client_secret
        self.access_token = None
        self.base_url = "https://api.avito.ru"
        
    def get_access_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token"""
        url = f"{self.base_url}/token"
        data = {
            'grant_type': 'client_credentials',
            'client_id': self.client_id,
            'client_secret': self.client_secret
        }
        
        response = requests.post(url, data=data)
        if response.status_code == 200:
            result = response.json()
            self.access_token = result['access_token']
            print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.access_token[:20]}...")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
            return False
    
    def get_headers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return {
            'Authorization': f'Bearer {self.access_token}',
            'Content-Type': 'application/json'
        }
    
    def explore_messenger_endpoints(self):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ endpoints –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞"""
        print("\nüîç –ò—Å—Å–ª–µ–¥—É—é endpoints –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞...")
        
        endpoints = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ endpoints –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
            "/messenger/v1/accounts/self/chats",
            "/messenger/v2/accounts/self/chats",
            "/messenger/v3/accounts/self/chats",
            "/messenger/chats",
            "/messenger/v1/chats",
            "/messenger/v2/chats",
            "/messenger/v3/chats",
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "/core/v1/messenger/chats",
            "/core/v1/accounts/self/messenger/chats",
            "/api/messenger/chats",
            "/v1/messenger/chats",
            "/v2/messenger/chats",
            
            # –ü–æ–ø—ã—Ç–∫–∏ —á–µ—Ä–µ–∑ job API
            "/job/v1/messenger/chats",
            "/job/v1/accounts/self/chats",
            "/job/v1/communications",
            "/job/v1/messages",
            
            # –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
            "/user/chats",
            "/user/messages",
            "/communications/chats",
            "/communications/messages"
        ]
        
        working_endpoints = []
        
        for endpoint in endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                response = requests.get(url, headers=self.get_headers(), timeout=10)
                
                if response.status_code == 200:
                    working_endpoints.append(endpoint)
                    print(f"‚úÖ {endpoint} - –†–ê–ë–û–¢–ê–ï–¢!")
                    try:
                        data = response.json()
                        print(f"   üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                        if isinstance(data, dict) and 'chats' in data:
                            print(f"   üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤: {len(data['chats'])}")
                        elif isinstance(data, list):
                            print(f"   üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(data)}")
                    except:
                        print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                        
                elif response.status_code == 401:
                    print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                elif response.status_code == 403:
                    print(f"‚ùå {endpoint} - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–Ω–µ—Ç –ø—Ä–∞–≤)")
                elif response.status_code == 404:
                    # –ù–µ –≤—ã–≤–æ–¥–∏–º 404 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                    pass
                else:
                    print(f"‚ö†Ô∏è {endpoint} - {response.status_code}: {response.text[:50]}...")
                    
            except requests.exceptions.Timeout:
                print(f"‚è∞ {endpoint} - –¢–∞–π–º–∞—É—Ç")
            except Exception as e:
                print(f"üí• {endpoint} - –û—à–∏–±–∫–∞: {e}")
                
        return working_endpoints
    
    def explore_job_endpoints(self):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ endpoints –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—é–º–µ"""
        print("\nüîç –ò—Å—Å–ª–µ–¥—É—é endpoints –¥–ª—è —Ä–µ–∑—é–º–µ...")
        
        endpoints = [
            "/job/v1/applications",
            "/job/v1/applications/received",
            "/job/v1/applications/sent", 
            "/job/v1/responses",
            "/job/v1/responses/received",
            "/job/v1/responses/sent",
            "/job/v1/contacts",
            "/job/v1/purchased-contacts",
            "/job/v1/purchases",
            "/job/v1/purchased-resumes",
            "/job/v1/bought-resumes",
            "/job/v1/contacts/purchased",
            "/job/v1/cv/purchased",
            "/job/v1/employer/applications",
            "/job/v1/employer/responses"
        ]
        
        working_endpoints = []
        
        for endpoint in endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                response = requests.get(url, headers=self.get_headers(), timeout=10)
                
                if response.status_code == 200:
                    working_endpoints.append(endpoint)
                    print(f"‚úÖ {endpoint} - –†–ê–ë–û–¢–ê–ï–¢!")
                    try:
                        data = response.json()
                        print(f"   üìÑ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {list(data.keys()) if isinstance(data, dict) else type(data)}")
                        if isinstance(data, dict):
                            for key, value in data.items():
                                if isinstance(value, list):
                                    print(f"   üìã {key}: {len(value)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    except:
                        print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                        
                elif response.status_code == 401:
                    print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                elif response.status_code == 403:
                    print(f"‚ùå {endpoint} - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif response.status_code == 404:
                    pass  # –ù–µ –≤—ã–≤–æ–¥–∏–º 404
                else:
                    print(f"‚ö†Ô∏è {endpoint} - {response.status_code}: {response.text[:50]}...")
                    
            except requests.exceptions.Timeout:
                print(f"‚è∞ {endpoint} - –¢–∞–π–º–∞—É—Ç")
            except Exception as e:
                pass
                
        return working_endpoints
    
    def explore_user_endpoints(self):
        """–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö endpoints"""
        print("\nüîç –ò—Å—Å–ª–µ–¥—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints...")
        
        endpoints = [
            "/user/operations",
            "/user/purchases", 
            "/user/bought-resumes",
            "/user/contacts",
            "/user/balance",
            "/user/transactions",
            "/user/history",
            "/core/v1/accounts/self/purchases",
            "/core/v1/accounts/self/transactions",
            "/core/v1/accounts/self/orders",
            "/core/v1/user/purchases"
        ]
        
        working_endpoints = []
        
        for endpoint in endpoints:
            url = f"{self.base_url}{endpoint}"
            try:
                response = requests.get(url, headers=self.get_headers(), timeout=10)
                
                if response.status_code == 200:
                    working_endpoints.append(endpoint)
                    print(f"‚úÖ {endpoint} - –†–ê–ë–û–¢–ê–ï–¢!")
                    try:
                        data = response.json()
                        print(f"   üìÑ –û—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False)[:200]}...")
                    except:
                        print(f"   üìÑ –û—Ç–≤–µ—Ç: {response.text[:100]}...")
                        
                elif response.status_code == 401:
                    print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                elif response.status_code == 403:
                    print(f"‚ùå {endpoint} - –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                elif response.status_code == 404:
                    pass
                else:
                    print(f"‚ö†Ô∏è {endpoint} - {response.status_code}: {response.text[:50]}...")
                    
            except requests.exceptions.Timeout:
                print(f"‚è∞ {endpoint} - –¢–∞–π–º–∞—É—Ç")
            except Exception as e:
                pass
                
        return working_endpoints

def main():
    CLIENT_ID = "pEm43bT2JX47aeb8OxNV"
    CLIENT_SECRET = "pURVGURY6Mt95xTPxrTHJ_SpzL7sBPNRfTt7qQkw"
    
    print("üïµÔ∏è –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å API Endpoints –ê–≤–∏—Ç–æ")
    print("=" * 50)
    
    explorer = AvitoEndpointExplorer(CLIENT_ID, CLIENT_SECRET)
    
    if not explorer.get_access_token():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
        return
    
    # –ò—Å—Å–ª–µ–¥—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints
    messenger_endpoints = explorer.explore_messenger_endpoints()
    job_endpoints = explorer.explore_job_endpoints()
    user_endpoints = explorer.explore_user_endpoints()
    
    print(f"\nüìä –ò–¢–û–ì–ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:")
    print(f"üí¨ –†–∞–±–æ—á–∏–µ endpoints –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞: {len(messenger_endpoints)}")
    for ep in messenger_endpoints:
        print(f"   ‚úÖ {ep}")
        
    print(f"üëî –†–∞–±–æ—á–∏–µ endpoints —Ä–µ–∑—é–º–µ: {len(job_endpoints)}")
    for ep in job_endpoints:
        print(f"   ‚úÖ {ep}")
        
    print(f"üë§ –†–∞–±–æ—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ endpoints: {len(user_endpoints)}")
    for ep in user_endpoints:
        print(f"   ‚úÖ {ep}")

if __name__ == "__main__":
    main()