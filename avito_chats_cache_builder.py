# -*- coding: utf-8 -*-
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫—ç—à–∞ —á–∞—Ç–æ–≤ Avito
–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ JSON —Ñ–∞–π–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
"""

import json
import time
from datetime import datetime
from pathlib import Path
import requests
import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
from avito_paid_cvs_save_v_16 import (
    API_BASE, SESSION, TIMEOUT, _tok, _ensure_my_user_id
)

def load_all_chats_to_cache():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ API –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –∫—ç—à —Ñ–∞–π–ª
    """
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        token = _tok.get()
        if not token:
            print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω")
            return {}
            
        # –ü–æ–ª—É—á–∞–µ–º user_id
        user_id = _ensure_my_user_id()
        if not user_id:
            print("‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id")
            return {}
        
        headers = {'Authorization': f'Bearer {token}'}
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –¥–æ –ª–∏–º–∏—Ç–∞ API
        all_chats = []
        limit = 100
        max_offset = 1000
        offset = 0
        
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã (–¥–æ offset {max_offset})...")
        
        while offset <= max_offset:
            params = {'offset': offset, 'limit': limit}
            chats_url = f"{API_BASE}/messenger/v2/accounts/{user_id}/chats"
            
            try:
                response = SESSION.get(chats_url, headers=headers, params=params, timeout=TIMEOUT)
                
                if response.status_code != 200:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ offset {offset}: {response.status_code}")
                    break
                    
                data = response.json()
                chats = data.get('chats', [])
                
                if not chats:
                    print(f"‚úÖ –ë–æ–ª—å—à–µ —á–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ offset {offset}")
                    break
                    
                all_chats.extend(chats)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: +{len(chats)}, –≤—Å–µ–≥–æ: {len(all_chats)}")
                
                if len(chats) < limit:
                    print(f"‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
                    break
                    
                offset += limit
                time.sleep(0.1)
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                break
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_chats)} —á–∞—Ç–æ–≤")
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –ø–æ chat_id
        chats_dict = {}
        for chat in all_chats:
            chat_id = chat.get("id")
            if chat_id:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                chat['_cached_at'] = datetime.now().isoformat()
                chat['_cache_version'] = 1
                chats_dict[chat_id] = chat
        
        return chats_dict
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤: {e}")
        return {}

def save_chats_cache(chats_dict, cache_file="avito_chats_cache.json"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞—Ç—ã –≤ –∫—ç—à —Ñ–∞–π–ª
    """
    cache_path = Path(cache_file)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫—ç—à–∞
    cache_data = {
        "metadata": {
            "created_at": datetime.now().isoformat(),
            "total_chats": len(chats_dict),
            "version": 1
        },
        "chats": chats_dict
    }
    
    try:
        with open(cache_path, 'w', encoding='utf-8') as f:
            json.dump(cache_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ –ö—ç—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {cache_path}")
        print(f"üìä –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –≤ –∫—ç—à–µ: {len(chats_dict)}")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—ç—à–∞: {e}")
        return False

def load_chats_cache(cache_file="avito_chats_cache.json"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞—Ç—ã –∏–∑ –∫—ç—à —Ñ–∞–π–ª–∞
    """
    cache_path = Path(cache_file)
    
    if not cache_path.exists():
        print(f"‚ö†Ô∏è –ö—ç—à —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {cache_path}")
        return {}
    
    try:
        with open(cache_path, 'r', encoding='utf-8') as f:
            cache_data = json.load(f)
        
        chats = cache_data.get("chats", {})
        metadata = cache_data.get("metadata", {})
        
        print(f"‚úÖ –ö—ç—à –∑–∞–≥—Ä—É–∂–µ–Ω: {len(chats)} —á–∞—Ç–æ–≤")
        print(f"üìÖ –°–æ–∑–¥–∞–Ω: {metadata.get('created_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        return chats
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∞: {e}")
        return {}

def update_chats_cache(new_chats_dict, cache_file="avito_chats_cache.json"):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à –Ω–æ–≤—ã–º–∏ —á–∞—Ç–∞–º–∏
    """
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—ç—à
    existing_chats = load_chats_cache(cache_file)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞—Ç—ã
    added_count = 0
    updated_count = 0
    
    for chat_id, chat_data in new_chats_dict.items():
        if chat_id in existing_chats:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤–µ–µ
            existing_updated = existing_chats[chat_id].get('updated', 0)
            new_updated = chat_data.get('updated', 0)
            
            if new_updated > existing_updated:
                existing_chats[chat_id] = chat_data
                updated_count += 1
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
            existing_chats[chat_id] = chat_data
            added_count += 1
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫—ç—à
    success = save_chats_cache(existing_chats, cache_file)
    
    if success:
        print(f"‚úÖ –ö—ç—à –æ–±–Ω–æ–≤–ª–µ–Ω: +{added_count} –Ω–æ–≤—ã—Ö, ~{updated_count} –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö")
    
    return success

if __name__ == "__main__":
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫—ç—à–∞ —á–∞—Ç–æ–≤ Avito")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
    chats = load_all_chats_to_cache()
    
    if chats:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
        save_chats_cache(chats)
        print("üéâ –ö—ç—à —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫—ç—à —á–∞—Ç–æ–≤")