#!/usr/bin/env python3
"""
üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø - –ü–û–õ–ù–ê–Ø –†–ê–ë–û–¢–ê –° AVITO –ë–ï–ó –ë–†–ê–£–ó–ï–†–ê
–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —á–∞—Ç–æ–≤ + –ø–æ–∏—Å–∫ + –∞–Ω–∞–ª–∏–∑ + CSV —ç–∫—Å–ø–æ—Ä—Ç
"""

import os
import sys
import json
import csv
import requests
import time
from datetime import datetime

def avito_full_export():
    """–ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∏ –∞–Ω–∞–ª–∏–∑ Avito —á–∞—Ç–æ–≤"""
    print("üöÄ –ü–û–õ–ù–´–ô –≠–ö–°–ü–û–†–¢ AVITO (–ë–ï–ó –ë–†–ê–£–ó–ï–†–ê)")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥—ã
    client_id = os.getenv('AVITO_CLIENT_ID')
    client_secret = os.getenv('AVITO_CLIENT_SECRET')
    
    if not client_id or not client_secret:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("$env:AVITO_CLIENT_ID = '–≤–∞—à_client_id'")
        print("$env:AVITO_CLIENT_SECRET = '–≤–∞—à_client_secret'")
        return None
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    token_url = "https://api.avito.ru/token"
    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret
    }
    
    try:
        response = requests.post(token_url, data=data, timeout=30)
        response.raise_for_status()
        token_info = response.json()
        access_token = token_info['access_token']
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
    try:
        response = requests.get("https://api.avito.ru/core/v1/accounts/self", headers=headers, timeout=30)
        if response.status_code == 200:
            user_info = response.json()
            user_id = user_info['id']
            print(f"‚úÖ {user_info['name']} (ID: {user_id})")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user info: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None
    
    # 3. –ü–æ–ª—É—á–∏—Ç—å –í–°–ï —á–∞—Ç—ã
    print("üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")
    all_chats = []
    offset = 0
    limit = 100
    
    while True:
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {offset//limit + 1} (offset {offset})...")
        
        chats_url = f"https://api.avito.ru/messenger/v2/accounts/{user_id}/chats"
        params = {'limit': limit, 'offset': offset}
        
        try:
            response = requests.get(chats_url, headers=headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                chats = data.get('chats', [])
                
                if not chats:
                    break
                
                all_chats.extend(chats)
                print(f"   ‚úÖ +{len(chats)}, –≤—Å–µ–≥–æ: {len(all_chats)}")
                
                if len(chats) < limit:
                    break
                
                offset += limit
                time.sleep(0.5)
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                break
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            break
    
    print(f"üéâ –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤: {len(all_chats)}")
    
    # 4. –°–æ–∑–¥–∞—Ç—å CSV —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_file = f"avito_contacts_{timestamp}.csv"
    
    print(f"üìä –°–æ–∑–¥–∞–Ω–∏–µ CSV —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏...")
    
    contacts = set()  # –ò–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    
    for chat in all_chats:
        # –ò–∑–≤–ª–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = chat.get('users', [])
        for user in users:
            if user.get('id') != user_id:  # –ù–µ –≤–∫–ª—é—á–∞—Ç—å —Å–µ–±—è
                contacts.add((
                    user.get('id', ''),
                    user.get('name', 'Unknown'),
                    chat.get('id', ''),
                    datetime.fromtimestamp(chat.get('updated', 0)).strftime('%Y-%m-%d %H:%M:%S') if chat.get('updated') else '',
                    '–í—Ö–æ–¥—è—â–∏–µ' if chat.get('last_message', {}).get('direction') == 'in' else '–ò—Å—Ö–æ–¥—è—â–∏–µ',
                    chat.get('last_message', {}).get('content', {}).get('text', '')[:100]
                ))
    
    # –ó–∞–ø–∏—Å–∞—Ç—å CSV
    with open(csv_file, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(['User_ID', '–ò–º—è', 'Chat_ID', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ_–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü–æ—Å–ª–µ–¥–Ω–µ–µ_—Å–æ–æ–±—â–µ–Ω–∏–µ'])
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        sorted_contacts = sorted(contacts, key=lambda x: x[3], reverse=True)
        writer.writerows(sorted_contacts)
    
    # 5. –°–æ–∑–¥–∞—Ç—å JSON —ç–∫—Å–ø–æ—Ä—Ç
    json_file = f"avito_export_{timestamp}.json"
    
    export_data = {
        'export_info': {
            'timestamp': datetime.now().isoformat(),
            'method': 'client_credentials_full',
            'total_chats': len(all_chats),
            'unique_contacts': len(contacts)
        },
        'user_info': user_info,
        'chats': all_chats,
        'summary': {
            'total_chats': len(all_chats),
            'unique_contacts': len(contacts),
            'active_last_30_days': len([c for c in all_chats if c.get('updated', 0) > (time.time() - 30*24*3600)]),
            'unread_chats': len([c for c in all_chats if c.get('unread_count', 0) > 0])
        }
    }
    
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(export_data, f, ensure_ascii=False, indent=2)
    
    # 6. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéâ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–Å–ù!")
    print(f"=" * 40)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info['name']}")
    print(f"üìß Email: {user_info['email']}")
    print(f"üìû Phone: {user_info['phone']}")
    print(f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(all_chats)}")
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts)}")
    print(f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 30 –¥–Ω–µ–π: {export_data['summary']['active_last_30_days']}")
    
    print(f"\nüíæ –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print(f"üìä CSV —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏: {csv_file}")
    print(f"üìÑ JSON —ç–∫—Å–ø–æ—Ä—Ç: {json_file}")
    
    # 7. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    print(f"\nüî• –¢–æ–ø-10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
    for i, contact in enumerate(sorted_contacts[:10], 1):
        print(f"   {i}. {contact[1]} ({contact[4]}) - {contact[3]}")
        if contact[5]:
            print(f"      üí¨ {contact[5]}")
    
    return {
        'files': {'csv': csv_file, 'json': json_file},
        'stats': export_data['summary']
    }

if __name__ == "__main__":
    avito_full_export()