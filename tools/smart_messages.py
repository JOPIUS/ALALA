#!/usr/bin/env python3
"""
–£–º–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Avito
–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ—Ç Client Credentials, –∑–∞—Ç–µ–º Authorization Code –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
"""

import os
import sys
import json
import requests
import time
import webbrowser
import threading
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs

class CallbackHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.server.auth_code = None
        query = urlparse(self.path).query
        params = parse_qs(query)
        
        if 'code' in params:
            self.server.auth_code = params['code'][0]
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write("""
            <html><body style="font-family: Arial; text-align: center; margin-top: 100px;">
            <h2>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
            <p>–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
            </body></html>
            """.encode('utf-8'))
        else:
            self.send_response(400)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write("""
            <html><body style="font-family: Arial; text-align: center; margin-top: 100px;">
            <h2>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p>–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω.</p>
            </body></html>
            """.encode('utf-8'))

def get_client_credentials_token(client_id, client_secret):
    """Client Credentials —Ç–æ–∫–µ–Ω (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)"""
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ Client Credentials —Ç–æ–∫–µ–Ω–∞...")
    
    token_url = "https://api.avito.ru/token"
    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret
    }
    
    try:
        response = requests.post(token_url, data=data, timeout=30)
        response.raise_for_status()
        token_info = response.json()
        access_token = token_info['access_token']
        print(f"‚úÖ Client Credentials —Ç–æ–∫–µ–Ω: {access_token[:20]}...")
        return access_token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Client Credentials: {e}")
        return None

def get_authorization_code_token(client_id, client_secret):
    """Authorization Code —Ç–æ–∫–µ–Ω (—Å –±—Ä–∞—É–∑–µ—Ä–æ–º)"""
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ Authorization Code —Ç–æ–∫–µ–Ω–∞...")
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    print("üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    redirect_uri = "http://localhost:8080"
    
    server = HTTPServer(('localhost', 8080), CallbackHandler)
    server.auth_code = None
    
    auth_url = f"https://avito.ru/oauth?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}&scope=messenger:read+messenger:write"
    print(f"üîó {auth_url}")
    webbrowser.open(auth_url)
    
    def wait_for_code():
        server.handle_request()
    
    thread = threading.Thread(target=wait_for_code)
    thread.start()
    thread.join(timeout=60)
    
    if not server.auth_code:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return None
    
    print(f"‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω: {server.auth_code[:20]}...")
    
    # –û–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
    token_url = "https://api.avito.ru/token"
    data = {
        'grant_type': 'authorization_code',
        'client_id': client_id,
        'client_secret': client_secret,
        'code': server.auth_code,
        'redirect_uri': redirect_uri
    }
    
    try:
        response = requests.post(token_url, data=data, timeout=30)
        response.raise_for_status()
        token_info = response.json()
        access_token = token_info['access_token']
        print(f"‚úÖ Authorization Code —Ç–æ–∫–µ–Ω: {access_token[:20]}...")
        return access_token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω: {e}")
        return None

def find_user_id(access_token):
    """–ù–∞–π—Ç–∏ user_id"""
    print("üîç –ü–æ–∏—Å–∫ user_id...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    try:
        response = requests.get("https://api.avito.ru/core/v1/accounts/self", headers=headers, timeout=30)
        if response.status_code == 200:
            data = response.json()
            user_id = data.get('id')
            if user_id:
                print(f"‚úÖ User ID: {user_id}")
                return user_id
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ user_id: {e}")
    
    return None

def get_all_messages(access_token, user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id {user_id}...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã
    print("üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤...")
    chats_url = f"https://api.avito.ru/messenger/v2/accounts/{user_id}/chats"
    
    try:
        chats_response = requests.get(chats_url, headers=headers, timeout=30)
        if chats_response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {chats_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {chats_response.text[:300]}")
            return None
        
        chats_data = chats_response.json()
        chats = chats_data.get('chats', [])
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
        
        # 2. –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        all_messages = {}
        total_messages = 0
        
        for i, chat in enumerate(chats[:10], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–º –ø–µ—Ä–≤—ã–º–∏ 10 —á–∞—Ç–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
            chat_id = chat['id']
            print(f"üìù –ß–∞—Ç {i}/10: {chat_id}")
            
            messages_url = f"https://api.avito.ru/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages"
            
            try:
                messages_response = requests.get(messages_url, headers=headers, timeout=30)
                
                if messages_response.status_code == 200:
                    messages_data = messages_response.json()
                    messages = messages_data.get('messages', [])
                    all_messages[chat_id] = messages
                    total_messages += len(messages)
                    print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                elif messages_response.status_code == 405:
                    print(f"   ‚ùå 405 - –Ω—É–∂–µ–Ω Authorization Code —Ç–æ–∫–µ–Ω")
                    return None
                else:
                    print(f"   ‚ùå {messages_response.status_code}: {messages_response.text[:100]}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return {
            'chats': chats,
            'messages': all_messages,
            'total_chats': len(chats),
            'total_messages': total_messages
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
        return None

def smart_get_messages():
    """–£–º–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–Ω–∞—á–∞–ª–∞ Client Credentials, –ø–æ—Ç–æ–º Authorization Code"""
    print("üß† –£–º–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π Avito")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥—ã
    client_id = os.getenv('AVITO_CLIENT_ID')
    client_secret = os.getenv('AVITO_CLIENT_SECRET')
    user_id = os.getenv('AVITO_USER_ID') or os.getenv('AVITO_ACCOUNT_ID')
    
    if not client_id or not client_secret:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("$env:AVITO_CLIENT_ID = '–≤–∞—à_client_id'")
        print("$env:AVITO_CLIENT_SECRET = '–≤–∞—à_client_secret'")
        return None
    
    # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å Client Credentials
    print("\nüîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Client Credentials (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)")
    access_token = get_client_credentials_token(client_id, client_secret)
    
    if access_token:
        # –ù–∞–π—Ç–∏ user_id –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if not user_id:
            user_id = find_user_id(access_token)
            if not user_id:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id")
                return None
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        messages_data = get_all_messages(access_token, user_id)
        
        if messages_data:
            print("\nüéâ Client Credentials —Å—Ä–∞–±–æ—Ç–∞–ª!")
        else:
            print("\n‚ö†Ô∏è Client Credentials –Ω–µ –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º")
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Authorization Code
            print("\nüîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Authorization Code (—Å –±—Ä–∞—É–∑–µ—Ä–æ–º)")
            access_token = get_authorization_code_token(client_id, client_secret)
            
            if access_token:
                messages_data = get_all_messages(access_token, user_id)
                if messages_data:
                    print("\nüéâ Authorization Code —Å—Ä–∞–±–æ—Ç–∞–ª!")
                else:
                    print("\n‚ùå –î–∞–∂–µ Authorization Code –Ω–µ –ø–æ–º–æ–≥")
                    return None
            else:
                print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Authorization Code —Ç–æ–∫–µ–Ω")
                return None
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–∂–µ Client Credentials —Ç–æ–∫–µ–Ω")
        return None
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if messages_data:
        result = {
            'user_id': user_id,
            'timestamp': datetime.now().isoformat(),
            'access_token': access_token[:20] + "...",
            **messages_data
        }
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"avito_messages_smart_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"üë§ User ID: {result['user_id']}")
        print(f"üí¨ –ß–∞—Ç–æ–≤: {result['total_chats']}")
        print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {result['total_messages']}")
        print(f"üíæ –§–∞–π–ª: {filename}")
        
        return result
    
    return None

if __name__ == "__main__":
    smart_get_messages()