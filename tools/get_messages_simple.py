#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Avito
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã + —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import os
import sys
import json
import requests
import time
from datetime import datetime

def get_avito_messages(client_id, client_secret, account_id=None):
    """
    –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Avito –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    
    Args:
        client_id: ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Avito
        client_secret: –°–µ–∫—Ä–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        account_id: ID –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ None - –ø–æ–ø—Ä–æ–±—É–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    
    Returns:
        dict: {'chats': [...], 'messages': {...}, 'account_info': {...}}
    """
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º client_credentials –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
    token_url = "https://api.avito.ru/token"
    token_data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret,
        'scope': 'messages.read messages.write'
    }
    
    try:
        token_response = requests.post(token_url, data=token_data, timeout=30)
        token_response.raise_for_status()
        token_info = token_response.json()
        access_token = token_info['access_token']
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:20]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not account_id:
        print("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–∫–∫–∞—É–Ω—Ç–∞...")
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints
        possible_endpoints = [
            "https://api.avito.ru/messenger/v1/accounts",
            "https://api.avito.ru/messenger/v1/account",
            "https://api.avito.ru/core/v1/accounts",
            "https://api.avito.ru/core/v1/account",
            "https://api.avito.ru/user/v1/accounts"
        ]
        
        for endpoint in possible_endpoints:
            try:
                print(f"üîç –ü—Ä–æ–±—É—é endpoint: {endpoint}")
                account_response = requests.get(endpoint, headers=headers, timeout=30)
                
                if account_response.status_code == 200:
                    try:
                        accounts = account_response.json()
                        print(f"üìù –û—Ç–≤–µ—Ç –æ—Ç {endpoint}: {json.dumps(accounts, ensure_ascii=False, indent=2)[:500]}...")
                        
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å account_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
                        if isinstance(accounts, list) and len(accounts) > 0:
                            if 'id' in accounts[0]:
                                account_id = accounts[0]['id']
                                print(f"‚úÖ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω (—Å–ø–∏—Å–æ–∫): {account_id}")
                                break
                        elif isinstance(accounts, dict):
                            if 'id' in accounts:
                                account_id = accounts['id']
                                print(f"‚úÖ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω (–æ–±—ä–µ–∫—Ç): {account_id}")
                                break
                            elif 'accounts' in accounts and len(accounts['accounts']) > 0:
                                account_id = accounts['accounts'][0]['id']
                                print(f"‚úÖ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω (–≤–ª–æ–∂–µ–Ω–Ω—ã–π): {account_id}")
                                break
                    except json.JSONDecodeError:
                        print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON –æ—Ç {endpoint}")
                        continue
                else:
                    print(f"‚ùå {endpoint}: {account_response.status_code}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {endpoint}: {e}")
                continue
        
        if not account_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –∞–∫–∫–∞—É–Ω—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å AVITO_ACCOUNT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("üí° –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ account_id –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ Avito")
            
            # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é
            try:
                manual_id = input("\nüî¢ –í–≤–µ–¥–∏—Ç–µ account_id –≤—Ä—É—á–Ω—É—é (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
                if manual_id:
                    account_id = manual_id
                    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º ID: {account_id}")
                else:
                    return None
            except (KeyboardInterrupt, EOFError):
                print("\n‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return None
    
    # 3. –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
    print("üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...")
    all_chats = []
    offset = 0
    limit = 100
    
    while True:
        try:
            chats_url = f"https://api.avito.ru/messenger/v1/accounts/{account_id}/chats"
            params = {'limit': limit, 'offset': offset}
            
            chats_response = requests.get(chats_url, headers=headers, params=params, timeout=30)
            chats_response.raise_for_status()
            chats_data = chats_response.json()
            
            if 'chats' in chats_data and chats_data['chats']:
                all_chats.extend(chats_data['chats'])
                print(f"üìù –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats_data['chats'])}, –≤—Å–µ–≥–æ: {len(all_chats)}")
                offset += limit
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(chats_data['chats']) < limit:
                    break
            else:
                break
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
            break
    
    print(f"‚úÖ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {len(all_chats)}")
    
    # 4. –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    print("üì® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–æ–≤...")
    all_messages = {}
    
    for i, chat in enumerate(all_chats, 1):
        chat_id = chat['id']
        print(f"üì® –ß–∞—Ç {i}/{len(all_chats)}: {chat_id}")
        
        chat_messages = []
        offset = 0
        limit = 100
        
        while True:
            try:
                messages_url = f"https://api.avito.ru/messenger/v1/accounts/{account_id}/chats/{chat_id}/messages"
                params = {'limit': limit, 'offset': offset}
                
                messages_response = requests.get(messages_url, headers=headers, params=params, timeout=30)
                messages_response.raise_for_status()
                messages_data = messages_response.json()
                
                if 'messages' in messages_data and messages_data['messages']:
                    chat_messages.extend(messages_data['messages'])
                    offset += limit
                    
                    if len(messages_data['messages']) < limit:
                        break
                else:
                    break
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}: {e}")
                break
        
        if chat_messages:
            all_messages[chat_id] = chat_messages
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(chat_messages)}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        time.sleep(0.5)
    
    # 5. –°–æ–±—Ä–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        'account_id': account_id,
        'access_token': access_token[:20] + "...",  # –ß–∞—Å—Ç–∏—á–Ω–æ —Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        'timestamp': datetime.now().isoformat(),
        'total_chats': len(all_chats),
        'total_messages': sum(len(msgs) for msgs in all_messages.values()),
        'chats': all_chats,
        'messages': all_messages
    }
    
    print(f"üéâ –ì–æ—Ç–æ–≤–æ! –ß–∞—Ç–æ–≤: {result['total_chats']}, —Å–æ–æ–±—â–µ–Ω–∏–π: {result['total_messages']}")
    return result

def save_messages_to_file(messages_data, filename=None):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"avito_messages_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(messages_data, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
    return filename

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    client_id = os.getenv('AVITO_CLIENT_ID')
    client_secret = os.getenv('AVITO_CLIENT_SECRET')
    account_id = os.getenv('AVITO_ACCOUNT_ID')  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    
    if not client_id or not client_secret:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è AVITO_CLIENT_ID –∏ AVITO_CLIENT_SECRET")
        print("–ü—Ä–∏–º–µ—Ä:")
        print("$env:AVITO_CLIENT_ID = '–≤–∞—à_client_id'")
        print("$env:AVITO_CLIENT_SECRET = '–≤–∞—à_client_secret'")
        sys.exit(1)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Avito...")
    
    # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_data = get_avito_messages(client_id, client_secret, account_id)
    
    if messages_data:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
        filename = save_messages_to_file(messages_data)
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"–ê–∫–∫–∞—É–Ω—Ç ID: {messages_data['account_id']}")
        print(f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {messages_data['total_chats']}")
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_data['total_messages']}")
        print(f"–§–∞–π–ª: {filename}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Ç–æ–≤
        if messages_data['chats']:
            print("\nüí¨ –ü–µ—Ä–≤—ã–µ —á–∞—Ç—ã:")
            for chat in messages_data['chats'][:5]:
                print(f"  - {chat.get('id', 'N/A')}: {chat.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è")

if __name__ == "__main__":
    main()