#!/usr/bin/env python3
"""
–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Client Credentials (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ Authorization Code
"""

import os
import sys
import json
import requests
import time
from datetime import datetime

def get_client_credentials_token(client_id, client_secret):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Client Credentials"""
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ Client Credentials —Ç–æ–∫–µ–Ω–∞...")
    
    token_url = "https://api.avito.ru/token"
    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret
    }
    
    try:
        response = requests.post(token_url, data=data, timeout=30)
        response.raise_for_status()
        token_info = response.json()
        access_token = token_info['access_token']
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:20]}...")
        return access_token, token_info
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        return None, None

def get_user_info(access_token):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    print("üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    try:
        response = requests.get("https://api.avito.ru/core/v1/accounts/self", headers=headers, timeout=30)
        if response.status_code == 200:
            user_info = response.json()
            user_id = user_info.get('id')
            print(f"‚úÖ User ID: {user_id}")
            print(f"üìß Email: {user_info.get('email', 'N/A')}")
            print(f"üìû Phone: {user_info.get('phone', 'N/A')}")
            print(f"üë§ Name: {user_info.get('name', 'N/A')}")
            return user_id, user_info
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user info: {response.status_code}")
            return None, None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None, None

def get_all_chats_detailed(access_token, user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –í–°–ï —á–∞—Ç—ã —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    print(f"üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ –í–°–ï–• —á–∞—Ç–æ–≤ –¥–ª—è user_id {user_id}...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
    all_chats = []
    offset = 0
    limit = 100
    
    while True:
        print(f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å offset {offset}...")
        
        chats_url = f"https://api.avito.ru/messenger/v2/accounts/{user_id}/chats"
        params = {
            'limit': limit,
            'offset': offset
        }
        
        try:
            response = requests.get(chats_url, headers=headers, params=params, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                chats = data.get('chats', [])
                
                if not chats:
                    print("üìÑ –ë–æ–ª—å—à–µ —á–∞—Ç–æ–≤ –Ω–µ—Ç")
                    break
                
                all_chats.extend(chats)
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(chats)}, –≤—Å–µ–≥–æ: {len(all_chats)}")
                
                # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ —á–µ–º limit, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                if len(chats) < limit:
                    break
                
                offset += limit
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ offset {offset}: {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:300]}")
                break
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ offset {offset}: {e}")
            break
    
    print(f"üéâ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤: {len(all_chats)}")
    return all_chats

def analyze_chats(chats):
    """–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã –∏ –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤...")
    
    analysis = {
        'total_chats': len(chats),
        'chat_types': {},
        'users': {},
        'items': {},
        'last_messages': [],
        'unread_chats': 0,
        'active_chats': 0
    }
    
    for chat in chats:
        # –¢–∏–ø —á–∞—Ç–∞
        context = chat.get('context', {})
        chat_type = context.get('type', 'unknown')
        analysis['chat_types'][chat_type] = analysis['chat_types'].get(chat_type, 0) + 1
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        users = chat.get('users', [])
        for user in users:
            user_id = user.get('id')
            user_name = user.get('name', 'Unknown')
            if user_id:
                analysis['users'][str(user_id)] = user_name
        
        # –û–±—ä—è–≤–ª–µ–Ω–∏—è
        if context.get('type') == 'u2i' and 'value' in context:
            item_info = context['value']
            item_id = item_info.get('id')
            if item_id:
                analysis['items'][str(item_id)] = {
                    'title': item_info.get('title', 'No title'),
                    'url': item_info.get('url', ''),
                    'price': item_info.get('price', 0)
                }
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_msg = chat.get('last_message')
        if last_msg:
            analysis['last_messages'].append({
                'chat_id': chat.get('id'),
                'author_id': last_msg.get('author_id'),
                'direction': last_msg.get('direction'),
                'type': last_msg.get('type'),
                'created': last_msg.get('created'),
                'content': last_msg.get('content', {})
            })
        
        # –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
        if chat.get('unread_count', 0) > 0:
            analysis['unread_chats'] += 1
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ (–æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
        updated = chat.get('updated', 0)
        if updated > (time.time() - 30 * 24 * 3600):
            analysis['active_chats'] += 1
    
    return analysis

def save_complete_data(token_info, user_info, chats, analysis):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π JSON"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    complete_data = {
        'export_info': {
            'timestamp': datetime.now().isoformat(),
            'method': 'client_credentials',
            'total_chats': len(chats)
        },
        'token_info': {
            'expires_in': token_info.get('expires_in'),
            'token_type': token_info.get('token_type'),
            'scope': token_info.get('scope', 'client_credentials')
        },
        'user_info': user_info,
        'analysis': analysis,
        'chats': chats
    }
    
    # –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
    filename_full = f"avito_chats_complete_{timestamp}.json"
    with open(filename_full, 'w', encoding='utf-8') as f:
        json.dump(complete_data, f, ensure_ascii=False, indent=2)
    
    # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç
    summary = {
        'export_info': complete_data['export_info'],
        'user_info': user_info,
        'analysis': analysis,
        'sample_chats': chats[:5],  # –ü–µ—Ä–≤—ã–µ 5 —á–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        'recent_messages': sorted(analysis['last_messages'], 
                                key=lambda x: x.get('created', 0), reverse=True)[:20]
    }
    
    filename_summary = f"avito_chats_summary_{timestamp}.json"
    with open(filename_summary, 'w', encoding='utf-8') as f:
        json.dump(summary, f, ensure_ascii=False, indent=2)
    
    return filename_full, filename_summary

def export_all_chats():
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ Client Credentials"""
    print("üöÄ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤ Avito (Client Credentials)")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥—ã
    client_id = os.getenv('AVITO_CLIENT_ID')
    client_secret = os.getenv('AVITO_CLIENT_SECRET')
    
    if not client_id or not client_secret:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("$env:AVITO_CLIENT_ID = '–≤–∞—à_client_id'")
        print("$env:AVITO_CLIENT_SECRET = '–≤–∞—à_client_secret'")
        return None
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
    access_token, token_info = get_client_credentials_token(client_id, client_secret)
    if not access_token:
        return None
    
    # 2. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id, user_info = get_user_info(access_token)
    if not user_id:
        return None
    
    # 3. –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã
    all_chats = get_all_chats_detailed(access_token, user_id)
    if not all_chats:
        return None
    
    # 4. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç—ã
    analysis = analyze_chats(all_chats)
    
    # 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    filename_full, filename_summary = save_complete_data(token_info, user_info, all_chats, analysis)
    
    # 6. –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüéâ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–Å–ù!")
    print(f"=" * 40)
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name')} (ID: {user_id})")
    print(f"üìß Email: {user_info.get('email')}")
    print(f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {analysis['total_chats']}")
    print(f"üì® –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {analysis['unread_chats']}")
    print(f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): {analysis['active_chats']}")
    
    print(f"\nüìä –¢–∏–ø—ã —á–∞—Ç–æ–≤:")
    for chat_type, count in analysis['chat_types'].items():
        type_name = {'u2i': '–ü–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º', 'u2u': '–ú–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'}.get(chat_type, chat_type)
        print(f"   {type_name}: {count}")
    
    print(f"\nüë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(analysis['users'])}")
    print(f"üè∑Ô∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(analysis['items'])}")
    
    print(f"\nüíæ –§–∞–π–ª—ã:")
    print(f"   üìÑ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {filename_full}")
    print(f"   üìã –ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç: {filename_summary}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if analysis['last_messages']:
        print(f"\nüì® –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
        recent = sorted(analysis['last_messages'], key=lambda x: x.get('created', 0), reverse=True)
        for i, msg in enumerate(recent[:5], 1):
            created = datetime.fromtimestamp(msg.get('created', 0)).strftime('%d.%m.%Y %H:%M')
            direction = {'in': '‚¨ÖÔ∏è', 'out': '‚û°Ô∏è'}.get(msg.get('direction'), '‚ùì')
            msg_type = msg.get('type', 'unknown')
            print(f"   {i}. {created} {direction} {msg_type}")
    
    return {
        'user_info': user_info,
        'analysis': analysis,
        'files': {
            'full': filename_full,
            'summary': filename_summary
        }
    }

if __name__ == "__main__":
    export_all_chats()