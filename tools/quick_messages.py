#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Avito
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞–µ—Ç Authorization Code —Ç–æ–∫–µ–Ω –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
"""

import os
import sys
import json
import requests
import time
import webbrowser
import threading
from datetime import datetime
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs, urlencode

class CallbackHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.server.auth_code = None
        query = urlparse(self.path).query
        params = parse_qs(query)
        
        if 'code' in params:
            self.server.auth_code = params['code'][0]
            self.send_response(200)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write("""
            <html><body style="font-family: Arial; text-align: center; margin-top: 100px;">
            <h2>‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</h2>
            <p>–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω, –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ.</p>
            </body></html>
            """.encode('utf-8'))
        else:
            self.send_response(400)
            self.send_header('Content-type', 'text/html; charset=utf-8')
            self.end_headers()
            self.wfile.write("""
            <html><body style="font-family: Arial; text-align: center; margin-top: 100px;">
            <h2>‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h2>
            <p>–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω.</p>
            </body></html>
            """.encode('utf-8'))

def get_auth_code(client_id, redirect_uri="http://localhost:8080"):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä"""
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
    
    # –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
    server = HTTPServer(('localhost', 8080), CallbackHandler)
    server.auth_code = None
    
    # –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
    auth_url = f"https://avito.ru/oauth?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}&scope=messages.read+messages.write"
    print(f"üåê –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä: {auth_url}")
    webbrowser.open(auth_url)
    
    # –ñ–¥–∞—Ç—å –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def wait_for_code():
        server.handle_request()
    
    thread = threading.Thread(target=wait_for_code)
    thread.start()
    thread.join(timeout=60)  # –ñ–¥—ë–º –º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥
    
    if server.auth_code:
        print(f"‚úÖ –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω: {server.auth_code[:20]}...")
        return server.auth_code
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        return None

def exchange_code_for_token(client_id, client_secret, auth_code, redirect_uri="http://localhost:8080"):
    """–û–±–º–µ–Ω—è—Ç—å –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω"""
    print("üîÑ –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω...")
    
    token_url = "https://api.avito.ru/token"
    data = {
        'grant_type': 'authorization_code',
        'client_id': client_id,
        'client_secret': client_secret,
        'code': auth_code,
        'redirect_uri': redirect_uri
    }
    
    try:
        response = requests.post(token_url, data=data, timeout=30)
        response.raise_for_status()
        token_info = response.json()
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {token_info['access_token'][:20]}...")
        return token_info['access_token']
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω: {e}")
        return None

def find_account_id(access_token):
    """–ù–∞–π—Ç–∏ user_id –¥–ª—è Messages API"""
    print("üîç –ü–æ–∏—Å–∫ user_id...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–∏—Å–∫–∞ user_id
    endpoints = [
        "https://api.avito.ru/core/v1/accounts/self",
        "https://api.avito.ru/core/v1/accounts/me", 
        "https://api.avito.ru/user/v1/self",
        "https://api.avito.ru/user/v1/me",
        "https://api.avito.ru/messenger/v1/accounts"
    ]
    
    for endpoint in endpoints:
        try:
            print(f"  üîó {endpoint}")
            response = requests.get(endpoint, headers=headers, timeout=30)
            
            if response.status_code == 200:
                data = response.json()
                print(f"  ‚úÖ –û—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False)[:200]}...")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID
                if isinstance(data, list) and data:
                    return data[0].get('id')
                elif isinstance(data, dict):
                    return data.get('id') or data.get('user_id') or data.get('account_id')
            else:
                print(f"  ‚ùå {response.status_code}")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return None

def get_messages_from_account(access_token, user_id):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print(f"üì® –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è user_id {user_id}...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã —á–µ—Ä–µ–∑ v2 API
    print("üí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤...")
    chats_url = f"https://api.avito.ru/messenger/v2/accounts/{user_id}/chats"
    
    try:
        chats_response = requests.get(chats_url, headers=headers, timeout=30)
        
        if chats_response.status_code == 200:
            chats_data = chats_response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats_data.get('chats', []))}")
            
            # –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ v1 API
            all_messages = {}
            for chat in chats_data.get('chats', []):
                chat_id = chat['id']
                print(f"  üìù –ß–∞—Ç {chat_id}...")
                
                messages_url = f"https://api.avito.ru/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages"
                try:
                    messages_response = requests.get(messages_url, headers=headers, timeout=30)
                    if messages_response.status_code == 200:
                        messages_data = messages_response.json()
                        all_messages[chat_id] = messages_data.get('messages', [])
                        print(f"    ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π: {len(all_messages[chat_id])}")
                    else:
                        print(f"    ‚ùå {messages_response.status_code}")
                        print(f"    –û—Ç–≤–µ—Ç: {messages_response.text[:200]}")
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞: {e}")
                
                time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
            return {
                'chats': chats_data.get('chats', []),
                'messages': all_messages,
                'total_chats': len(chats_data.get('chats', [])),
                'total_messages': sum(len(msgs) for msgs in all_messages.values())
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {chats_response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {chats_response.text[:500]}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤: {e}")
        return None

def quick_get_avito_messages():
    """–ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Avito"""
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π Avito")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    client_id = os.getenv('AVITO_CLIENT_ID')
    client_secret = os.getenv('AVITO_CLIENT_SECRET')
    user_id = os.getenv('AVITO_USER_ID') or os.getenv('AVITO_ACCOUNT_ID')  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–µ–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    
    if not client_id or not client_secret:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("$env:AVITO_CLIENT_ID = '–≤–∞—à_client_id'")
        print("$env:AVITO_CLIENT_SECRET = '–≤–∞—à_client_secret'")
        return None
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_code = get_auth_code(client_id)
    if not auth_code:
        return None
    
    # 2. –û–±–º–µ–Ω—è—Ç—å –Ω–∞ —Ç–æ–∫–µ–Ω
    access_token = exchange_code_for_token(client_id, client_secret, auth_code)
    if not access_token:
        return None
    
    # 3. –ù–∞–π—Ç–∏ user_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not user_id:
        user_id = find_account_id(access_token)
        if not user_id:
            user_id = input("üî¢ –í–≤–µ–¥–∏—Ç–µ user_id –≤—Ä—É—á–Ω—É—é: ").strip()
            if not user_id:
                print("‚ùå user_id –Ω–µ —É–∫–∞–∑–∞–Ω")
                return None
    
    # 4. –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    messages_data = get_messages_from_account(access_token, user_id)
    if not messages_data:
        return None
    
    # 5. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = {
        'user_id': user_id,
        'timestamp': datetime.now().isoformat(),
        **messages_data
    }
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"avito_messages_quick_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print(f"üìä User ID: {result['user_id']}")
    print(f"üìä –ß–∞—Ç–æ–≤: {result['total_chats']}")
    print(f"üì® –°–æ–æ–±—â–µ–Ω–∏–π: {result['total_messages']}")
    print(f"üíæ –§–∞–π–ª: {filename}")
    
    return result

if __name__ == "__main__":
    quick_get_avito_messages()