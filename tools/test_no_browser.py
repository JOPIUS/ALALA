#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Client Credentials flow –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""

import os
import sys
import json
import requests
import time
from datetime import datetime

def get_client_credentials_token(client_id, client_secret):
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Client Credentials (–±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞)"""
    print("üîë –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Client Credentials...")
    
    token_url = "https://api.avito.ru/token"
    data = {
        'grant_type': 'client_credentials',
        'client_id': client_id,
        'client_secret': client_secret
    }
    
    try:
        response = requests.post(token_url, data=data, timeout=30)
        response.raise_for_status()
        token_info = response.json()
        access_token = token_info['access_token']
        print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {access_token[:20]}...")
        return access_token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        if hasattr(e, 'response'):
            print(f"   –û—Ç–≤–µ—Ç: {e.response.text[:300]}")
        return None

def try_get_user_id(access_token):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ user_id —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
    print("üîç –ü–æ–∏—Å–∫ user_id...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints
    endpoints = [
        "https://api.avito.ru/core/v1/accounts/self",
        "https://api.avito.ru/core/v1/accounts/me", 
        "https://api.avito.ru/user/v1/self",
        "https://api.avito.ru/user/v1/me",
        "https://api.avito.ru/core/v1/accounts",
        "https://api.avito.ru/messenger/v1/accounts"
    ]
    
    for endpoint in endpoints:
        try:
            print(f"  üîó {endpoint}")
            response = requests.get(endpoint, headers=headers, timeout=30)
            
            print(f"    –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                try:
                    data = response.json()
                    print(f"    ‚úÖ –û—Ç–≤–µ—Ç: {json.dumps(data, ensure_ascii=False)[:300]}...")
                    
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å ID
                    if isinstance(data, list) and data:
                        user_id = data[0].get('id') or data[0].get('user_id')
                        if user_id:
                            print(f"‚úÖ User ID –Ω–∞–π–¥–µ–Ω: {user_id}")
                            return user_id
                    elif isinstance(data, dict):
                        user_id = data.get('id') or data.get('user_id') or data.get('account_id')
                        if user_id:
                            print(f"‚úÖ User ID –Ω–∞–π–¥–µ–Ω: {user_id}")
                            return user_id
                except json.JSONDecodeError:
                    print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.text[:200]}")
                
        except Exception as e:
            print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return None

def try_get_chats(access_token, user_id):
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã"""
    print(f"üí¨ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –¥–ª—è user_id {user_id}...")
    
    headers = {'Authorization': f'Bearer {access_token}'}
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ API
    chat_endpoints = [
        f"https://api.avito.ru/messenger/v2/accounts/{user_id}/chats",
        f"https://api.avito.ru/messenger/v1/accounts/{user_id}/chats"
    ]
    
    for endpoint in chat_endpoints:
        try:
            print(f"  üîó {endpoint}")
            response = requests.get(endpoint, headers=headers, timeout=30)
            
            print(f"    –°—Ç–∞—Ç—É—Å: {response.status_code}")
            if response.status_code == 200:
                try:
                    data = response.json()
                    chats = data.get('chats', [])
                    print(f"    ‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats)}")
                    
                    if chats:
                        # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
                        chat_id = chats[0]['id']
                        print(f"    üì® –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ {chat_id}...")
                        
                        messages_endpoint = f"https://api.avito.ru/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages"
                        messages_response = requests.get(messages_endpoint, headers=headers, timeout=30)
                        
                        print(f"      –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_response.status_code}")
                        if messages_response.status_code == 200:
                            messages_data = messages_response.json()
                            messages = messages_data.get('messages', [])
                            print(f"      ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {len(messages)}")
                        else:
                            print(f"      ‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_response.text[:200]}")
                    
                    return data
                except json.JSONDecodeError:
                    print(f"    ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON")
            else:
                print(f"    ‚ùå –û—à–∏–±–∫–∞: {response.text[:300]}")
                
        except Exception as e:
            print(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
    
    return None

def test_messages_api():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Messages API –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞"""
    print("üöÄ –¢–µ—Å—Ç Messages API –±–µ–∑ –±—Ä–∞—É–∑–µ—Ä–∞")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥—ã
    client_id = os.getenv('AVITO_CLIENT_ID')
    client_secret = os.getenv('AVITO_CLIENT_SECRET')
    user_id = os.getenv('AVITO_USER_ID') or os.getenv('AVITO_ACCOUNT_ID')
    
    if not client_id or not client_secret:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("$env:AVITO_CLIENT_ID = '–≤–∞—à_client_id'")
        print("$env:AVITO_CLIENT_SECRET = '–≤–∞—à_client_secret'")
        return None
    
    # 1. –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Client Credentials
    access_token = get_client_credentials_token(client_id, client_secret)
    if not access_token:
        return None
    
    # 2. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞–π—Ç–∏ user_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    if not user_id:
        user_id = try_get_user_id(access_token)
        if not user_id:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
            user_id = input("üî¢ –í–≤–µ–¥–∏—Ç–µ user_id –≤—Ä—É—á–Ω—É—é (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            if not user_id:
                print("üí° –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ user_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è endpoints...")
                user_id = "123456789"  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ Messages API
    chats_data = try_get_chats(access_token, user_id)
    
    # 4. –°–æ—Ö—Ä–∞–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    result = {
        'timestamp': datetime.now().isoformat(),
        'access_token': access_token[:20] + "...",
        'user_id': user_id,
        'test_results': {
            'token_obtained': access_token is not None,
            'chats_accessible': chats_data is not None,
            'chats_data': chats_data
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"avito_messages_test_{timestamp}.json"
    
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
    print(f"üîë –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {'‚úÖ' if result['test_results']['token_obtained'] else '‚ùå'}")
    print(f"üí¨ –ß–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã: {'‚úÖ' if result['test_results']['chats_accessible'] else '‚ùå'}")
    print(f"üíæ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
    
    if not result['test_results']['chats_accessible']:
        print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("‚Ä¢ Client Credentials —Ç–æ–∫–µ–Ω –Ω–µ –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ Messages API")
        print("‚Ä¢ –ù—É–∂–µ–Ω Authorization Code —Ç–æ–∫–µ–Ω (—Å –±—Ä–∞—É–∑–µ—Ä–æ–º)")
        print("‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id")
        print("‚Ä¢ API —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
    
    return result

if __name__ == "__main__":
    test_messages_api()