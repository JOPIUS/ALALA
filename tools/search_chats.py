#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–∞—Ö Avito
"""

import json
import os
import sys
from datetime import datetime, timedelta
import re

def load_latest_export():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–∫—Å–ø–æ—Ä—Ç —á–∞—Ç–æ–≤"""
    # –ù–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª summary
    summary_files = [f for f in os.listdir('.') if f.startswith('avito_chats_summary_') and f.endswith('.json')]
    
    if not summary_files:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —á–∞—Ç–æ–≤")
        return None
    
    latest_file = sorted(summary_files)[-1]
    print(f"üìÑ –ó–∞–≥—Ä—É–∂–∞—é: {latest_file}")
    
    try:
        with open(latest_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {data['analysis']['total_chats']} —á–∞—Ç–æ–≤")
        return data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

def search_users(data, query):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏"""
    print(f"üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: '{query}'")
    
    users = data['analysis']['users']
    found = []
    
    for user_id, name in users.items():
        if query.lower() in name.lower():
            found.append({'id': user_id, 'name': name})
    
    if found:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(found)}")
        for user in found[:10]:  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã—Ö 10
            print(f"   üë§ {user['name']} (ID: {user['id']})")
        if len(found) > 10:
            print(f"   ... –∏ –µ—â—ë {len(found) - 10}")
    else:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return found

def filter_recent_chats(data, days=7):
    """–§–∏–ª—å—Ç—Ä —á–∞—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
    print(f"üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
    
    cutoff_time = datetime.now() - timedelta(days=days)
    cutoff_timestamp = cutoff_time.timestamp()
    
    recent_messages = []
    for msg in data['analysis']['last_messages']:
        if msg.get('created', 0) > cutoff_timestamp:
            recent_messages.append(msg)
    
    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —á–∞—Ç–∞–º
    recent_chats = {}
    for msg in recent_messages:
        chat_id = msg['chat_id']
        if chat_id not in recent_chats:
            recent_chats[chat_id] = []
        recent_chats[chat_id].append(msg)
    
    print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(recent_chats)}")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ø-10 —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö
    sorted_chats = sorted(recent_chats.items(), 
                         key=lambda x: max(msg.get('created', 0) for msg in x[1]), 
                         reverse=True)
    
    print(f"üî• –¢–æ–ø-10 —Å–∞–º—ã—Ö –Ω–µ–¥–∞–≤–Ω–∏—Ö:")
    for i, (chat_id, messages) in enumerate(sorted_chats[:10], 1):
        last_msg = max(messages, key=lambda x: x.get('created', 0))
        last_time = datetime.fromtimestamp(last_msg.get('created', 0))
        direction = {'in': '‚¨ÖÔ∏è', 'out': '‚û°Ô∏è'}.get(last_msg.get('direction'), '‚ùì')
        print(f"   {i}. {last_time.strftime('%d.%m %H:%M')} {direction} {chat_id[:20]}...")
    
    return recent_chats

def search_by_message_content(data, query):
    """–ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"üí¨ –ü–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö: '{query}'")
    
    found_messages = []
    for msg in data['analysis']['last_messages']:
        content = msg.get('content', {})
        text = content.get('text', '')
        
        if query.lower() in text.lower():
            found_messages.append(msg)
    
    if found_messages:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(found_messages)}")
        sorted_msgs = sorted(found_messages, key=lambda x: x.get('created', 0), reverse=True)
        
        for i, msg in enumerate(sorted_msgs[:5], 1):
            created = datetime.fromtimestamp(msg.get('created', 0))
            direction = {'in': '‚¨ÖÔ∏è', 'out': '‚û°Ô∏è'}.get(msg.get('direction'), '‚ùì')
            text = msg.get('content', {}).get('text', '')[:50]
            print(f"   {i}. {created.strftime('%d.%m %H:%M')} {direction} {text}...")
    else:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return found_messages

def show_statistics(data):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    analysis = data['analysis']
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–û–í")
    print("=" * 40)
    print(f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {analysis['total_chats']}")
    print(f"üì® –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö: {analysis['unread_chats']}")
    print(f"üî• –ê–∫—Ç–∏–≤–Ω—ã—Ö (30 –¥–Ω–µ–π): {analysis['active_chats']}")
    print(f"üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(analysis['users'])}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_types = {}
    directions = {'in': 0, 'out': 0}
    
    for msg in analysis['last_messages']:
        msg_type = msg.get('type', 'unknown')
        msg_types[msg_type] = msg_types.get(msg_type, 0) + 1
        
        direction = msg.get('direction')
        if direction in directions:
            directions[direction] += 1
    
    print(f"\nüì® –¢–∏–ø—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:")
    for msg_type, count in sorted(msg_types.items(), key=lambda x: x[1], reverse=True):
        print(f"   {msg_type}: {count}")
    
    print(f"\n‚ÜîÔ∏è –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
    print(f"   ‚¨ÖÔ∏è –í—Ö–æ–¥—è—â–∏–µ: {directions['in']}")
    print(f"   ‚û°Ô∏è –ò—Å—Ö–æ–¥—è—â–∏–µ: {directions['out']}")
    
    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º
    recent_days = {}
    now = datetime.now()
    
    for msg in analysis['last_messages']:
        created = datetime.fromtimestamp(msg.get('created', 0))
        days_ago = (now - created).days
        
        if days_ago <= 30:
            recent_days[days_ago] = recent_days.get(days_ago, 0) + 1
    
    if recent_days:
        print(f"\nüìÖ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:")
        for day in sorted(recent_days.keys())[:7]:
            count = recent_days[day]
            if day == 0:
                print(f"   –°–µ–≥–æ–¥–Ω—è: {count}")
            elif day == 1:
                print(f"   –í—á–µ—Ä–∞: {count}")
            else:
                print(f"   {day} –¥–Ω–µ–π –Ω–∞–∑–∞–¥: {count}")

def interactive_search():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫"""
    data = load_latest_export()
    if not data:
        return
    
    print(f"\nüîç –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ü–û–ò–°–ö –ß–ê–¢–û–í")
    print("=" * 40)
    print("–ö–æ–º–∞–Ω–¥—ã:")
    print("  stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    print("  user <–∏–º—è> - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  recent <–¥–Ω–∏> - –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∑–∞ N –¥–Ω–µ–π")
    print("  search <—Ç–µ–∫—Å—Ç> - –ø–æ–∏—Å–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö")
    print("  exit - –≤—ã—Ö–æ–¥")
    print()
    
    while True:
        try:
            cmd = input("üîç –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ").strip()
            
            if cmd.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                break
            elif cmd.lower() == 'stats':
                show_statistics(data)
            elif cmd.startswith('user '):
                query = cmd[5:].strip()
                search_users(data, query)
            elif cmd.startswith('recent '):
                try:
                    days = int(cmd[7:].strip())
                    filter_recent_chats(data, days)
                except ValueError:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —á–∏—Å–ª–æ–º")
            elif cmd.startswith('search '):
                query = cmd[7:].strip()
                search_by_message_content(data, query)
            else:
                print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    if len(sys.argv) > 1:
        # –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        cmd = sys.argv[1].lower()
        data = load_latest_export()
        if not data:
            sys.exit(1)
            
        if cmd == 'stats':
            show_statistics(data)
        elif cmd == 'users' and len(sys.argv) > 2:
            search_users(data, ' '.join(sys.argv[2:]))
        elif cmd == 'recent' and len(sys.argv) > 2:
            days = int(sys.argv[2])
            filter_recent_chats(data, days)
        elif cmd == 'search' and len(sys.argv) > 2:
            search_by_message_content(data, ' '.join(sys.argv[2:]))
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
            print("  python search_chats.py stats")
            print("  python search_chats.py users <–∏–º—è>")
            print("  python search_chats.py recent <–¥–Ω–∏>")
            print("  python search_chats.py search <—Ç–µ–∫—Å—Ç>")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        interactive_search()