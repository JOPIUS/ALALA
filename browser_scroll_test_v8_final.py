# browser_scroll_test_v8_final.py
# -*- coding: utf-8 -*-
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–∞—Ä—Å–µ—Ä–∞ Avito —Ä–µ–∑—é–º–µ v8
–§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ
"""

from pathlib import Path
from datetime import datetime
from playwright.sync_api import sync_playwright, Error as PwError
import time
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
USER_DATA_DIR = Path("./avito_browser_profile").resolve()
TARGET_URL = "https://www.avito.ru/profile/paid-cvs"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
MAX_TOTAL_SCROLL_SEC = 300  # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
QUIET_MS = 1000             
STABLE_GROWTH_ROUNDS = 20   # –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–µ—Ä–ø–µ–ª–∏–≤–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
NAV_TIMEOUT = 30_000        

# –¢–æ—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ
RESUME_CARD_SELECTORS = [
    '[class*="styles-module-root"]',  # –†–∞–±–æ—á–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –∏–∑ v7
    'article[data-marker="cv-snippet"]',  # –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    'a[href*="/resume/"]:not([href*="/account/"]):not([href*="/step"])',  # –°—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–∑—é–º–µ
    '[class*="cv-snippet"]',  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
    'article',   # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏
]

# –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å fallback
RESUME_DATA_SELECTORS = {
    'name': [
        '[data-marker="cv-snippet-name"]',
        'h3[class*="title"]',
        'h3',
        '.text-text-LurtD.text-size-s-BxGpL.text-color-black-ohrjA',
        'a[href*="/resume/"] span',
        'a[href*="/resume/"]',
        '[class*="name"] span',
        '[class*="title"] span'
    ],
    'link': [
        'a[href*="/resume/"]:not([href*="/account/"]):not([href*="/step"])',
        'a[href*="/cv/"]'
    ],
    'salary': [
        '[data-marker="cv-snippet-salary"]',
        '.text-color-green-zxyRV',
        '[class*="salary"]',
        '[class*="price"]',
        'span:contains("‚ÇΩ")',
        'span:contains("—Ä—É–±")',
        '.text-text-LurtD:contains("‚ÇΩ")'
    ],
    'location': [
        '[data-marker="cv-snippet-location"]',
        '.text-color-blue-Ad9BB',
        '[class*="location"]',
        '.text-text-LurtD.text-size-s-BxGpL.text-color-blue-Ad9BB'
    ],
    'date': [
        '[data-marker="cv-snippet-date"]',
        '.text-size-xs-',
        '[class*="date"]',
        '.text-text-LurtD.text-size-xs-'
    ]
}

def log_with_time(msg):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
    print(f"üïê [{datetime.now().strftime('%H:%M:%S')}] {msg}")

def find_best_resume_selector(page):
    """–ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ —Ä–µ–∑—é–º–µ"""
    best_selector = None
    max_total_count = 0
    
    for selector in RESUME_CARD_SELECTORS:
        try:
            # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            count = page.evaluate(f'() => document.querySelectorAll(\'{selector}\').length')
            if count > max_total_count:
                max_total_count = count
                best_selector = selector
                log_with_time(f"‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': {count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        except Exception as e:
            log_with_time(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ '{selector}': {e}")
    
    if best_selector:
        log_with_time(f"üéØ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä: '{best_selector}' ({max_total_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
    else:
        log_with_time("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä")
    
    return best_selector

def count_valid_resumes(page, selector):
    """–ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
    if not selector:
        return 0
    
    try:
        return page.evaluate(f'() => document.querySelectorAll(\'{selector}\').length')
    except:
        return 0

def wait_for_network_idle(page, timeout_ms=3000):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        page.wait_for_load_state("networkidle", timeout=timeout_ms)
        return True
    except Exception:
        return False

def detect_end_of_page(page):
    """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    try:
        end_indicators = page.evaluate("""
            () => {
                const indicators = {
                    footer_visible: false,
                    no_more_text: false,
                    scroll_at_bottom: false,
                    active_load_buttons: 0,
                    no_new_content: false
                };
                
                // –ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
                const moreButtons = document.querySelectorAll('button, a, [role="button"]');
                for (const btn of moreButtons) {
                    const text = btn.textContent.toLowerCase().trim();
                    if (text.includes('–µ—â—ë') && btn.offsetParent !== null && 
                        !btn.disabled && !btn.getAttribute('aria-disabled')) {
                        indicators.active_load_buttons++;
                    }
                }
                
                // –ü–æ–∏—Å–∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –∫–æ–Ω—Ü–∞
                const endTexts = [
                    '–±–æ–ª—å—à–µ —Ä–µ–∑—é–º–µ –Ω–µ—Ç', '–∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞', '–≤—Å–µ —Ä–µ–∑—é–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã',
                    '–±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
                ];
                
                const bodyText = document.body.textContent.toLowerCase();
                indicators.no_more_text = endTexts.some(text => bodyText.includes(text));
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫—Ä–æ–ª–ª–∞
                const scrollTop = window.pageYOffset;
                const scrollHeight = document.documentElement.scrollHeight;
                const clientHeight = window.innerHeight;
                
                indicators.scroll_at_bottom = (scrollTop + clientHeight + 200) >= scrollHeight;
                
                return indicators;
            }
        """)
        
        return end_indicators
    except Exception as e:
        log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return {"active_load_buttons": 999, "no_more_text": False, "scroll_at_bottom": False}

def smart_scroll_with_resume_detection(page, target_count=None, max_time_sec=300):
    """
    –£–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—é–º–µ
    """
    log_with_time(f"üöÄ –£–ú–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ v8 –¥–ª—è —Ä–µ–∑—é–º–µ (—Ü–µ–ª—å: {target_count or '–í–°–ï'}, –ª–∏–º–∏—Ç: {max_time_sec}—Å)")
    
    start_time = time.time()
    deadline = start_time + max_time_sec
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
    best_selector = find_best_resume_selector(page)
    if not best_selector:
        log_with_time("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ä–µ–∑—é–º–µ")
        return 0, None
    
    last_count = 0
    last_height = 0
    no_change_count = 0
    iteration = 0
    last_log_time = start_time
    
    initial_count = count_valid_resumes(page, best_selector)
    initial_height = page.evaluate("document.documentElement.scrollHeight")
    log_with_time(f"üìã –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {initial_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—ã—Å–æ—Ç–∞: {initial_height}px")
    
    while time.time() < deadline:
        iteration += 1
        current_count = count_valid_resumes(page, best_selector)
        current_height = page.evaluate("document.documentElement.scrollHeight")
        current_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if current_count > last_count or current_height > last_height or (current_time - last_log_time) > 10:
            if current_count > last_count or current_height > last_height:
                count_progress = current_count - last_count
                height_progress = current_height - last_height
                log_with_time(f"üìà +{count_progress} = {current_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—ã—Å–æ—Ç–∞: {current_height}px (+{height_progress}) [–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}]")
                last_count = current_count
                last_height = current_height
                no_change_count = 0
            else:
                log_with_time(f"‚è≥ {current_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –≤—ã—Å–æ—Ç–∞: {current_height}px [–∏—Ç–µ—Ä–∞—Ü–∏—è {iteration}, —Å—Ç–∞–±–∏–ª—å–Ω–æ: {no_change_count}]")
                no_change_count += 1
            last_log_time = current_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–∏
            if target_count and current_count >= target_count:
                log_with_time(f"üéØ –¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê: {current_count} >= {target_count}")
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        end_indicators = detect_end_of_page(page)
        if (end_indicators['no_more_text'] or 
            (end_indicators['scroll_at_bottom'] and end_indicators['active_load_buttons'] == 0 and no_change_count >= 10)):
            log_with_time("üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            break
        
        try:
            # –ü–ª–∞–≤–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            page.evaluate("""
                window.scrollBy({
                    top: window.innerHeight * 0.9,
                    behavior: 'smooth'
                });
            """)
            
            time.sleep(0.5)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å—Ç–∏–º—É–ª—è—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
            if iteration % 3 == 0:
                page.keyboard.press("PageDown")
                time.sleep(0.3)
            
            # –í—Å—Ç—Ä—è—Ö–∏–≤–∞—é—â–∏–π —Å–∫—Ä–æ–ª–ª –ø—Ä–∏ –∑–∞—Å—Ç–æ–µ
            if no_change_count >= 5:
                log_with_time("üí´ –í—Å—Ç—Ä—è—Å–∫–∞: —Å–∫—Ä–æ–ª–ª –≤–≤–µ—Ä—Ö-–≤–Ω–∏–∑ + –∫–ª–∏–∫ –∫–Ω–æ–ø–æ–∫")
                page.evaluate("window.scrollBy(0, -800)")
                time.sleep(0.5)
                page.evaluate("window.scrollBy(0, 1600)")
                time.sleep(0.5)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ "–ï—â—ë"
                try:
                    clicked = page.evaluate("""
                        () => {
                            const buttons = document.querySelectorAll('button, a, [role="button"]');
                            let clicked = false;
                            for (const btn of buttons) {
                                const text = btn.textContent.toLowerCase();
                                if (text.includes('–µ—â—ë') || text.includes('–∑–∞–≥—Ä—É–∑') || text.includes('–ø–æ–∫–∞–∑–∞—Ç—å')) {
                                    try {
                                        btn.scrollIntoView();
                                        btn.click();
                                        clicked = true;
                                        break;
                                    } catch(e) {}
                                }
                            }
                            return clicked;
                        }
                    """)
                    
                    if clicked:
                        log_with_time("‚úÖ –ö–ª–∏–∫–Ω—É–ª –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏")
                        time.sleep(3.0)
                        no_change_count = 0
                except:
                    pass
            
            # –û–∂–∏–¥–∞–Ω–∏–µ —Å–µ—Ç–∏
            if iteration % 8 == 0:
                wait_for_network_idle(page, timeout_ms=2000)
                
        except Exception as e:
            log_with_time(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}: {e}")
            time.sleep(1.0)
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –∑–∞–≤–∏—Å–∞–Ω–∏—è
        if no_change_count >= STABLE_GROWTH_ROUNDS:
            log_with_time(f"üõë {no_change_count} –∏—Ç–µ—Ä–∞—Ü–∏–π –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü")
            break
    
    final_count = count_valid_resumes(page, best_selector)
    total_elapsed = time.time() - start_time
    
    log_with_time(f"üèÅ –£–ú–ù–´–ô —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    log_with_time(f"üìä –ò—Ç–æ–≥–æ: {final_count} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞ {total_elapsed:.1f}—Å ({iteration} –∏—Ç–µ—Ä–∞—Ü–∏–π)")
    log_with_time(f"‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {final_count/total_elapsed:.1f} —ç–ª–µ–º–µ–Ω—Ç–æ–≤/—Å–µ–∫")
    
    return final_count, best_selector

def extract_premium_resume_data(page, card_selector):
    """–ü—Ä–µ–º–∏—É–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∏–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—é–º–µ"""
    log_with_time("üìä –ü—Ä–µ–º–∏—É–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ...")
    
    if not card_selector:
        log_with_time("‚ùå –ù–µ—Ç —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∫–∞—Ä—Ç–æ—á–µ–∫")
        return []
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
    best_data_selectors = {}
    for data_type, selectors in RESUME_DATA_SELECTORS.items():
        test_js = f"""
        () => {{
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –ø–µ—Ä–≤—ã—Ö 5 –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–∫–∞—Ö —Ä–µ–∑—é–º–µ
            const cards = Array.from(document.querySelectorAll('{card_selector}')).filter(card => {{
                const resumeLink = card.href || card.querySelector('a[href*="/resume/"]')?.href;
                return resumeLink && resumeLink.includes('/resume/') && 
                       !resumeLink.includes('/account/') && !resumeLink.includes('/step');
            }}).slice(0, 5);
            
            if (cards.length === 0) return {{selector: null, count: 0}};
            
            let bestSelector = null;
            let maxCount = 0;
            
            {json.dumps(selectors)}.forEach(selector => {{
                try {{
                    let totalCount = 0;
                    cards.forEach(card => {{
                        const elements = card.querySelectorAll(selector);
                        if (elements.length > 0) {{
                            // –î–ª—è —Å—Å—ã–ª–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                            if (selector.includes('href')) {{
                                const validLinks = Array.from(elements).filter(el => 
                                    el.href && el.href.includes('/resume/') && 
                                    !el.href.includes('/account/') && !el.href.includes('/step')
                                );
                                totalCount += validLinks.length;
                            }} else {{
                                // –î–ª—è –¥—Ä—É–≥–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
                                const validElements = Array.from(elements).filter(el => 
                                    el.textContent && el.textContent.trim().length > 0
                                );
                                totalCount += validElements.length;
                            }}
                        }}
                    }});
                    
                    if (totalCount > maxCount) {{
                        maxCount = totalCount;
                        bestSelector = selector;
                    }}
                }} catch(e) {{}}
            }});
            
            return {{selector: bestSelector, count: maxCount}};
        }}
        """
        
        try:
            result = page.evaluate(test_js)
            if result['selector'] and result['count'] > 0:
                best_data_selectors[data_type] = result['selector']
                log_with_time(f"‚úÖ –õ—É—á—à–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è {data_type}: '{result['selector']}' (–Ω–∞–π–¥–µ–Ω–æ –≤ {result['count']} —Å–ª—É—á–∞—è—Ö)")
            else:
                log_with_time(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è {data_type}")
        except Exception as e:
            log_with_time(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –¥–ª—è {data_type}: {e}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
    extract_js = f"""
    () => {{
        // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–∑—é–º–µ
        const allCards = document.querySelectorAll('{card_selector}');
        const validCards = Array.from(allCards).filter(card => {{
            const resumeLink = card.href || card.querySelector('a[href*="/resume/"]')?.href;
            return resumeLink && resumeLink.includes('/resume/') && 
                   !resumeLink.includes('/account/') && !resumeLink.includes('/step');
        }});
        
        const results = [];
        const selectors = {json.dumps(best_data_selectors)};
        
        validCards.forEach((card, index) => {{
            try {{
                const data = {{
                    index: index + 1,
                    name: '',
                    link: '',
                    resume_id: '',
                    salary: '',
                    location: '',
                    date: '',
                    visible: card.getBoundingClientRect().top < window.innerHeight * 2
                }};
                
                // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
                for (const [dataType, selector] of Object.entries(selectors)) {{
                    try {{
                        if (dataType === 'link') {{
                            const linkEl = card.href ? card : card.querySelector(selector);
                            if (linkEl) {{
                                const href = linkEl.href || linkEl.getAttribute('href') || '';
                                if (href.includes('/resume/') && !href.includes('/account/') && !href.includes('/step')) {{
                                    data.link = href;
                                    const match = href.match(/resume\\/([^?\\/]+)/);
                                    data.resume_id = match ? match[1] : '';
                                }}
                            }}
                        }} else {{
                            const el = card.querySelector(selector);
                            if (el && el.textContent) {{
                                const text = el.textContent.trim();
                                if (text.length > 0) {{
                                    data[dataType] = text;
                                }}
                            }}
                        }}
                    }} catch(e) {{
                        console.error(`Error extracting ${{dataType}}:`, e);
                    }}
                }}
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
                if (!data.name) {{
                    // –ò—â–µ–º –∏–º—è –≤ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    const nameEl = card.querySelector('h3, h4, h5, .title, [class*="title"], a[href*="/resume/"]');
                    if (nameEl) {{
                        const text = nameEl.textContent?.trim();
                        if (text && text.length > 2 && text.length < 200 && 
                            !text.includes('‚ÇΩ') && !text.includes('—Ä—É–±') &&
                            !text.match(/\\d{{2}}\\.\\d{{2}}\\.\\d{{4}}/)) {{
                            data.name = text;
                        }}
                    }}
                }}
                
                if (!data.link) {{
                    // –ò—â–µ–º –ª—é–±—É—é –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∑—é–º–µ
                    const linkEl = card.querySelector('a[href*="/resume/"]');
                    if (linkEl && linkEl.href) {{
                        const href = linkEl.href;
                        if (!href.includes('/account/') && !href.includes('/step')) {{
                            data.link = href;
                            const match = href.match(/resume\\/([^?\\/]+)/);
                            data.resume_id = match ? match[1] : '';
                        }}
                    }}
                }}
                
                if (!data.salary) {{
                    // –ò—â–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
                    const salaryEl = Array.from(card.querySelectorAll('*')).find(el => 
                        el.textContent && (el.textContent.includes('‚ÇΩ') || el.textContent.includes('—Ä—É–±'))
                    );
                    if (salaryEl) {{
                        data.salary = salaryEl.textContent.trim();
                    }}
                }}
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏
                if (data.link || data.name) {{
                    results.push(data);
                }}
            }} catch (e) {{
                console.error('Error processing card:', e);
            }}
        }});
        
        return results;
    }}
    """
    
    try:
        data = page.evaluate(extract_js)
        valid_data = [item for item in data if item.get('link') and '/resume/' in item.get('link', '')]
        log_with_time(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π, {len(valid_data)} —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        names_count = sum(1 for item in valid_data if item.get('name'))
        salary_count = sum(1 for item in valid_data if item.get('salary'))
        location_count = sum(1 for item in valid_data if item.get('location'))
        date_count = sum(1 for item in valid_data if item.get('date'))
        
        log_with_time(f"üìà –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:")
        log_with_time(f"   –ò–º–µ–Ω–∞: {names_count}/{len(valid_data)} ({names_count/len(valid_data)*100:.1f}%)")
        log_with_time(f"   –ó–∞—Ä–ø–ª–∞—Ç—ã: {salary_count}/{len(valid_data)} ({salary_count/len(valid_data)*100:.1f}%)")
        log_with_time(f"   –õ–æ–∫–∞—Ü–∏–∏: {location_count}/{len(valid_data)} ({location_count/len(valid_data)*100:.1f}%)")
        log_with_time(f"   –î–∞—Ç—ã: {date_count}/{len(valid_data)} ({date_count/len(valid_data)*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä
        if valid_data:
            sample = valid_data[0]
            log_with_time(f"üîç –ü—Ä–∏–º–µ—Ä: {sample.get('name', '–ù–µ—Ç –∏–º–µ–Ω–∏')[:40]}... | {sample.get('link', '')[:60]}...")
        
        return valid_data
    except Exception as e:
        log_with_time(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def test_browser_performance_v8():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v8 - —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ"""
    log_with_time("üé≠ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è v8")
    
    USER_DATA_DIR.mkdir(parents=True, exist_ok=True)
    
    with sync_playwright() as p:
        context = p.chromium.launch_persistent_context(
            user_data_dir=str(USER_DATA_DIR),
            headless=False,
            viewport={"width": 1200, "height": 800},
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-web-security",
                "--blink-settings=imagesEnabled=false",
                "--disable-images",
                "--force-device-scale-factor=0.7",
                "--window-size=1200,800"
            ],
        )
        
        context.set_default_timeout(NAV_TIMEOUT)
        page = context.new_page()
        page.add_init_script("document.body.style.zoom = '0.7'")
        
        try:
            log_with_time("üåê –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito...")
            page.goto(TARGET_URL, wait_until="domcontentloaded")
            
            input("\nüîë –í–æ–π–¥–∏—Ç–µ –≤ Avito –∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...\n")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–∑—é–º–µ
            log_with_time(f"\n{'='*60}")
            log_with_time(f"üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ v8: –≤—Å–µ —Ä–µ–∑—é–º–µ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º")
            log_with_time(f"{'='*60}")
            
            start_time = time.time()
            
            # –£–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
            result = smart_scroll_with_resume_detection(page, target_count=None)
            if isinstance(result, tuple):
                final_count, card_selector = result
            else:
                final_count = result
                card_selector = None
            
            # –ü—Ä–µ–º–∏—É–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            data = extract_premium_resume_data(page, card_selector)
            
            elapsed = time.time() - start_time
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            log_with_time(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {elapsed:.1f}—Å")
            log_with_time(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—é–º–µ: {final_count}")
            log_with_time(f"üìä –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(data)}")
            log_with_time(f"‚ö° –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {final_count/elapsed:.1f} —Ä–µ–∑—é–º–µ/—Å–µ–∫")
            log_with_time(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {len(data)/final_count*100:.1f}%")
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"browser_test_v8_final_{timestamp}.json"
            
            result = {
                "test_params": {
                    "version": "v8_final",
                    "timestamp": timestamp,
                    "duration_seconds": elapsed,
                    "selector_used": card_selector
                },
                "performance": {
                    "cards_loaded": final_count,
                    "data_extracted": len(data),
                    "extraction_success_rate": len(data)/final_count*100 if final_count > 0 else 0,
                    "speed_per_second": final_count/elapsed,
                    "data_quality": {
                        "valid_names": sum(1 for item in data if item.get('name')),
                        "valid_links": sum(1 for item in data if item.get('link') and '/resume/' in item.get('link', '')),
                        "valid_salaries": sum(1 for item in data if item.get('salary')),
                        "valid_locations": sum(1 for item in data if item.get('location')),
                        "valid_dates": sum(1 for item in data if item.get('date'))
                    }
                },
                "sample_data": data[:10],  # –ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                "full_data": data  # –í—Å–µ –¥–∞–Ω–Ω—ã–µ
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=2)
            
            log_with_time(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
            
        except Exception as e:
            log_with_time(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            log_with_time("üèÅ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    test_browser_performance_v8()