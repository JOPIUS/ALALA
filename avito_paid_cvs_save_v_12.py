# avito_paid_cvs_save_v_12.py
# -*- coding: utf-8 -*-
"""
Avito: –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ ‚Üí XLSX —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å—Ç–∞—Ç—É—Å–æ–≤ —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π.

v12 = v11 + –õ–ò–°–¢ "–ö–û–ú–£ –ù–ï –ü–ò–°–ê–õ–ò" –° –°–°–´–õ–ö–ê–ú–ò –ù–ê –ß–ê–¢–´
  ‚Ä¢ –ù–æ–≤—ã–π –ª–∏—Å—Ç "–ö–æ–º—É_–Ω–µ_–ø–∏—Å–∞–ª–∏" —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ —É –∫–æ—Ç–æ—Ä—ã—Ö chat_status = "–ù–µ –≤—ã—Å—ã–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
  ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –≤ –ª–∏—Å—Ç–µ "–î–ª—è_–∑–≤–æ–Ω–∫–æ–≤" –ø–ª—é—Å —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç
  ‚Ä¢ –í–∫–ª—é—á–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞ —Ç–æ–∂–µ
  ‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –ø–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–±–æ—Ç–µ

v11: –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
v10: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API + –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
v9: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å Playwright

CLI:
  python avito_paid_cvs_save_v_12.py --limit 100 --tz Europe/Moscow --threads 8

–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:
  pip install playwright pandas openpyxl requests tzdata
  python -m playwright install chromium
"""
from __future__ import annotations

from pathlib import Path
from datetime import datetime, timedelta, timezone
from playwright.sync_api import sync_playwright, Error as PwError
from concurrent.futures import ThreadPoolExecutor, as_completed
from enum import Enum
from typing import List, Dict, Optional, Tuple
import re, time, json, sys, os
import pandas as pd

# ========== –¢–ò–ü–ò–ó–ê–¶–ò–Ø –°–¢–ê–¢–£–°–û–í –ß–ê–¢–û–í ==========

class ChatStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —á–∞—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    READ_NO_REPLY = "–ü—Ä–æ—á–∏—Ç–∞–ª/–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"           # –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—á–∏—Ç–∞–ª, –Ω–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
    READ_REPLIED = "–ü—Ä–æ—á–∏—Ç–∞–ª/–û—Ç–≤–µ—Ç–∏–ª"               # –ö–∞–Ω–¥–∏–¥–∞—Ç –ø—Ä–æ—á–∏—Ç–∞–ª –∏ –æ—Ç–≤–µ—Ç–∏–ª
    NO_MESSAGES_SENT = "–ù–µ –≤—ã—Å—ã–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"      # –ú—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    NOT_INTERESTED = "–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"                 # –ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞–ø–∏—Å–∞–ª, —á—Ç–æ –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ
    NO_CHAT = "–ß–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"                     # –ù–µ—Ç —á–∞—Ç–∞ —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
    UNKNOWN = "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π"                      # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å

class MessageDirection(Enum):
    """–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    IN = "in"               # –í—Ö–æ–¥—è—â–µ–µ (–æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞)
    OUT = "out"             # –ò—Å—Ö–æ–¥—è—â–µ–µ (–æ—Ç –Ω–∞—Å)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã API
API_BASE = "https://api.avito.ru"
CLIENT_ID = "Dm4ruLMEr9MFsV72dN95"
CLIENT_SECRET = "f73lNoAJLzuqwoGtVaMnByhQfSlwcyIN_m7wyOeT"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
DEFAULT_THREADS = 8
TIMEOUT = 30

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
OUTPUT_DIR = r"C:\ManekiNeko\AVITO_API\output"
BROWSER_PROFILE_PATH = r".\avito_browser_profile"
STOPLIST_DIR = r".\Stoplist"

# ========== –í–†–ï–ú–ï–ù–ù–´–ï –ó–û–ù–´ ==========

def get_timezone_info(tz_name: str = "Europe/Moscow") -> timezone:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç timezone –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –∑–æ–Ω—ã.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ zoneinfo (Python 3.9+), —Ç–∞–∫ –∏ –ø—Ä–æ—Å—Ç–æ–µ —Å–º–µ—â–µ–Ω–∏–µ.
    """
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å zoneinfo (Python 3.9+)
        from zoneinfo import ZoneInfo
        return ZoneInfo(tz_name)
    except ImportError:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Python
        if tz_name == "Europe/Moscow":
            return timezone(timedelta(hours=3))
        elif tz_name == "Europe/Kiev":
            return timezone(timedelta(hours=2))
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            return timezone(timedelta(hours=3))

# ========== –ó–ê–ì–†–£–ó–ö–ê –°–¢–û–ü-–õ–ò–°–¢–ê ==========

def load_stoplist() -> set:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–æ–ø-–ª–∏—Å—Ç –∏–∑ Excel-—Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ Stoplist"""
    stoplist = set()
    stoplist_path = Path(STOPLIST_DIR)
    
    if not stoplist_path.exists():
        print(f"üìÅ –ü–∞–ø–∫–∞ {STOPLIST_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return stoplist
    
    excel_files = list(stoplist_path.glob("*.xlsx"))
    if not excel_files:
        print(f"üìÅ Excel —Ñ–∞–π–ª—ã –≤ {STOPLIST_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°—Ç–æ–ø-–ª–∏—Å—Ç –ø—É—Å—Ç.")
        return stoplist
    
    print(f"üìã –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–æ–ø-–ª–∏—Å—Ç –∏–∑ {len(excel_files)} —Ñ–∞–π–ª–æ–≤...")
    
    for file_path in excel_files:
        try:
            print(f"  üìÑ –ß–∏—Ç–∞—é {file_path.name}")
            df = pd.read_excel(file_path)
            
            # –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å ID
            id_columns = [col for col in df.columns if 'id' in col.lower() or '–∞–π–¥–∏' in col.lower()]
            
            for col in id_columns:
                ids = df[col].dropna().astype(str)
                stoplist.update(ids)
                print(f"    ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(ids)} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '{col}'")
                
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {file_path.name}: {e}")
    
    print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω —Å—Ç–æ–ø-–ª–∏—Å—Ç: {len(stoplist)} –∑–∞–ø–∏—Å–µ–π")
    return stoplist

# ========== –§–£–ù–ö–¶–ò–ò API ==========

def get_access_token() -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç access token –¥–ª—è Avito API"""
    import requests
    
    auth_url = "https://api.avito.ru/token"
    
    payload = {
        'grant_type': 'client_credentials',
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET
    }
    
    response = requests.post(auth_url, data=payload, timeout=TIMEOUT)
    
    if response.status_code == 200:
        token_data = response.json()
        return token_data['access_token']
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")

def _respect_rate_limit():
    """–ü–∞—É–∑–∞ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits"""
    time.sleep(0.1)  # 100ms –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

def fetch_resume_data(resume_id: str, token: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ API"""
    import requests
    
    _respect_rate_limit()
    
    url = f"{API_BASE}/job/v2/resumes/{resume_id}"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(url, headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 401:
            # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            new_token = get_access_token()
            headers = {"Authorization": f"Bearer {new_token}"}
            response = requests.get(url, headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –¥–ª—è —Ä–µ–∑—é–º–µ {resume_id}: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–µ–∑—é–º–µ {resume_id}: {e}")
        return None

def fetch_resume_contacts(resume_id: str, token: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ API"""
    import requests
    
    _respect_rate_limit()
    
    url = f"{API_BASE}/job/v1/resumes/{resume_id}/contacts"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(url, headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 401:
            # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            new_token = get_access_token()
            headers = {"Authorization": f"Bearer {new_token}"}
            response = requests.get(url, headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 200:
            return response.json()
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è —Ä–µ–∑—é–º–µ {resume_id}: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ {resume_id}: {e}")
        return None

def fetch_chats_batch(token: str, offset: int = 0, limit: int = 100, unread_only: Optional[bool] = None) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Ç—ã —á–µ—Ä–µ–∑ messenger API v2 —Å –æ–±—Ö–æ–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è offset=1000
    
    –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–æ offset=1000
    2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å unread_only=True 
    3. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ v1 API
    4. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤
    """
    import requests
    
    _respect_rate_limit()
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –Ω–µ–≥–æ
    user_id = get_user_id(token)
    if not user_id:
        return []
    
    url = f"{API_BASE}/messenger/v2/accounts/{user_id}/chats"
    headers = {"Authorization": f"Bearer {token}"}
    
    params = {
        "offset": offset,
        "limit": min(limit, 100)  # API –º–∞–∫—Å–∏–º—É–º 100
    }
    
    if unread_only is not None:
        params["unread_only"] = str(unread_only).lower()
    
    try:
        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
        
        if response.status_code == 401:
            # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            new_token = get_access_token()
            headers = {"Authorization": f"Bearer {new_token}"}
            response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('chats', [])
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API —á–∞—Ç–æ–≤ (offset={offset}): {response.status_code}")
            return []
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —á–∞—Ç–æ–≤ (offset={offset}): {e}")
        return []

def get_user_id(token: str) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç user_id –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    import requests
    
    # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å user_id - –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    url = f"{API_BASE}/core/v1/accounts/self"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(url, headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 200:
            data = response.json()
            return str(data.get('id', ''))
        else:
            # Fallback - –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —á–∞—Ç–æ–≤
            chat_url = f"{API_BASE}/messenger/v2/accounts/self/chats"
            response = requests.get(chat_url, headers=headers, params={"limit": 1}, timeout=TIMEOUT)
            
            if response.status_code == 200:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ URL –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                return "self"  # API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç "self" –≤–º–µ—Å—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ ID
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ user_id: {e}")
    
    return "self"  # Fallback

def load_all_chats_optimized(token: str) -> Tuple[List[Dict], Dict]:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –æ–±—Ö–æ–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è offset=1000
    
    –°—Ç—Ä–∞—Ç–µ–≥–∏—è:
    1. –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ v2 API –¥–æ –ª–∏–º–∏—Ç–∞ offset=1000
    2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å unread_only=True –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö
    3. –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ—Ä–µ–∑ v1 API –∫–∞–∫ fallback
    4. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∞
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å–ø–∏—Å–æ–∫_—á–∞—Ç–æ–≤, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    """
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞—é –≤—Å–µ —á–∞—Ç—ã –∏–∑ messenger API...")
    
    all_chats = []
    chat_ids_seen = set()
    stats = {
        "v2_main_loaded": 0,
        "v2_unread_loaded": 0, 
        "v1_fallback_loaded": 0,
        "chat_types_loaded": 0,
        "unique_chats": 0,
        "offset_limit_reached": False
    }
    
    # 1. –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ v2 API
    offset = 0
    batch_size = 100
    consecutive_empty = 0
    
    while offset < 1000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ API
        print(f"  üì• –ó–∞–≥—Ä—É–∂–∞—é —á–∞—Ç—ã: offset={offset}, limit={batch_size}")
        
        batch = fetch_chats_batch(token, offset=offset, limit=batch_size)
        
        if not batch:
            consecutive_empty += 1
            if consecutive_empty >= 3:
                print(f"    ‚èπÔ∏è –ü—É—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–¥—Ä—è–¥: {consecutive_empty}, –∑–∞–≤–µ—Ä—à–∞—é –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É")
                break
        else:
            consecutive_empty = 0
        
        new_chats = 0
        for chat in batch:
            chat_id = chat.get('id')
            if chat_id and chat_id not in chat_ids_seen:
                all_chats.append(chat)
                chat_ids_seen.add(chat_id)
                new_chats += 1
        
        stats["v2_main_loaded"] += new_chats
        print(f"    ‚úÖ –ù–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –≤ batch: {new_chats} (–≤—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(all_chats)})")
        
        if len(batch) < batch_size:
            print(f"    üèÅ –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π batch ({len(batch)} < {batch_size}), –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            break
            
        offset += batch_size
        time.sleep(0.1)  # Rate limiting
    
    if offset >= 1000:
        stats["offset_limit_reached"] = True
        print(f"  ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç offset=1000, –ø—Ä–∏–º–µ–Ω—è—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        
        # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å unread_only=True
        print(f"  üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
        
        unread_offset = 0
        while unread_offset < 1000:
            batch = fetch_chats_batch(token, offset=unread_offset, limit=batch_size, unread_only=True)
            
            if not batch:
                break
            
            new_chats = 0
            for chat in batch:
                chat_id = chat.get('id')
                if chat_id and chat_id not in chat_ids_seen:
                    all_chats.append(chat)
                    chat_ids_seen.add(chat_id)
                    new_chats += 1
            
            stats["v2_unread_loaded"] += new_chats
            
            if new_chats > 0:
                print(f"    ‚úÖ –ù–æ–≤—ã—Ö –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {new_chats}")
            
            if len(batch) < batch_size:
                break
                
            unread_offset += batch_size
            time.sleep(0.1)
        
        # 3. –ü–æ–ø—ã—Ç–∫–∞ v1 API –∫–∞–∫ fallback
        print(f"  üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: –ü—Ä–æ–±—É—é v1 API –∫–∞–∫ fallback")
        try:
            v1_chats = fetch_chats_v1_fallback(token)
            
            new_chats = 0
            for chat in v1_chats:
                chat_id = chat.get('id')
                if chat_id and chat_id not in chat_ids_seen:
                    all_chats.append(chat)
                    chat_ids_seen.add(chat_id)
                    new_chats += 1
            
            stats["v1_fallback_loaded"] = new_chats
            if new_chats > 0:
                print(f"    ‚úÖ –ù–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ v1 API: {new_chats}")
        except Exception as e:
            print(f"    ‚ùå v1 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        print(f"  üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è 4: –ü—Ä–æ–±—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤")
        chat_types = ["job_response", "job_invite", "other"]
        
        for chat_type in chat_types:
            try:
                type_chats = fetch_chats_by_type(token, chat_type)
                
                new_chats = 0
                for chat in type_chats:
                    chat_id = chat.get('id')
                    if chat_id and chat_id not in chat_ids_seen:
                        all_chats.append(chat)
                        chat_ids_seen.add(chat_id)
                        new_chats += 1
                
                stats["chat_types_loaded"] += new_chats
                if new_chats > 0:
                    print(f"    ‚úÖ –ù–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Ç–∏–ø–∞ '{chat_type}': {new_chats}")
                    
            except Exception as e:
                print(f"    ‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ —Ç–∏–ø–∞ '{chat_type}' –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
    
    stats["unique_chats"] = len(all_chats)
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:")
    print(f"  üì• –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ v2: {stats['v2_main_loaded']}")
    print(f"  üì• –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ v2: {stats['v2_unread_loaded']}")
    print(f"  üì• Fallback v1: {stats['v1_fallback_loaded']}")
    print(f"  üì• –ü–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤: {stats['chat_types_loaded']}")
    print(f"  üéØ –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {stats['unique_chats']}")
    
    return all_chats, stats

def fetch_chats_v1_fallback(token: str) -> List[Dict]:
    """Fallback –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ v1 API"""
    import requests
    
    user_id = get_user_id(token)
    url = f"{API_BASE}/messenger/v1/accounts/{user_id}/chats"
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(url, headers=headers, timeout=TIMEOUT)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('chats', [])
        else:
            return []
            
    except Exception:
        return []

def fetch_chats_by_type(token: str, chat_type: str) -> List[Dict]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ —Ç–∏–ø—É (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è API)"""
    import requests
    
    user_id = get_user_id(token)
    url = f"{API_BASE}/messenger/v2/accounts/{user_id}/chats"
    headers = {"Authorization": f"Bearer {token}"}
    
    params = {
        "chat_type": chat_type,
        "limit": 100
    }
    
    try:
        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('chats', [])
        else:
            return []
            
    except Exception:
        return []

def fetch_chat_messages(chat_id: str, token: str, limit: int = 20) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞"""
    import requests
    
    _respect_rate_limit()
    
    user_id = get_user_id(token)
    url = f"{API_BASE}/messenger/v1/accounts/{user_id}/chats/{chat_id}/messages"
    headers = {"Authorization": f"Bearer {token}"}
    
    params = {"limit": limit}
    
    try:
        response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
        
        if response.status_code == 401:
            # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π
            new_token = get_access_token()
            headers = {"Authorization": f"Bearer {new_token}"}
            response = requests.get(url, headers=headers, params=params, timeout=TIMEOUT)
        
        if response.status_code == 200:
            data = response.json()
            return data.get('messages', [])
        else:
            return []
            
    except Exception:
        return []

# ========== –ê–ù–ê–õ–ò–ó –°–¢–ê–¢–£–°–û–í –ß–ê–¢–û–í ==========

def analyze_chat_status(chat_data: Dict, messages: List[Dict]) -> Tuple[ChatStatus, MessageDirection, str]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Å—Ç–∞—Ç—É—Å_—á–∞—Ç–∞, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_—Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–µ–∫—Å—Ç_–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ_—Å–æ–æ–±—â–µ–Ω–∏—è)
    """
    if not messages:
        return ChatStatus.NO_MESSAGES_SENT, MessageDirection.OUT, ""
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    sorted_messages = sorted(messages, key=lambda x: x.get('created', ''), reverse=True)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    last_message = sorted_messages[0]
    last_direction = MessageDirection(last_message.get('direction', 'out'))
    last_text = last_message.get('content', {}).get('text', '')
    
    # –ò—â–µ–º –æ—Ç–∫–∞–∑—ã –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    refusal_patterns = [
        r'–Ω–µ\s*–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
        r'–Ω–µ\s*–ø–æ–¥—Ö–æ–¥–∏—Ç',
        r'–Ω–∞—à–µ–ª\s*(–¥—Ä—É–≥—É—é)?\s*—Ä–∞–±–æ—Ç—É',
        r'—É–∂–µ\s*—Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–µ–Ω',
        r'—Å–ø–∞—Å–∏–±–æ.*–Ω–µ\s*–Ω—É–∂–Ω–æ',
        r'–æ—Ç–∫–∞–∑—ã–≤–∞—é',
        r'–Ω–µ\s*—Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é'
    ]
    
    for msg in sorted_messages[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        text = msg.get('content', {}).get('text', '').lower()
        direction = MessageDirection(msg.get('direction', 'out'))
        
        if direction == MessageDirection.IN:  # –í—Ö–æ–¥—è—â–µ–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            for pattern in refusal_patterns:
                if re.search(pattern, text):
                    return ChatStatus.NOT_INTERESTED, last_direction, last_text
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    our_messages = [msg for msg in sorted_messages if MessageDirection(msg.get('direction', 'out')) == MessageDirection.OUT]
    their_messages = [msg for msg in sorted_messages if MessageDirection(msg.get('direction', 'out')) == MessageDirection.IN]
    
    if not our_messages:
        return ChatStatus.NO_MESSAGES_SENT, last_direction, last_text
    
    if not their_messages:
        return ChatStatus.READ_NO_REPLY, last_direction, last_text
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    last_our_message = max(our_messages, key=lambda x: x.get('created', ''))
    last_their_message = max(their_messages, key=lambda x: x.get('created', ''))
    
    our_time = last_our_message.get('created', '')
    their_time = last_their_message.get('created', '')
    
    if their_time > our_time:
        return ChatStatus.READ_REPLIED, last_direction, last_text
    else:
        return ChatStatus.READ_NO_REPLY, last_direction, last_text

# ========== –§–£–ù–ö–¶–ò–ò –ü–ê–†–°–ò–ù–ì–ê ==========

def parse_status_and_location(text: str) -> Tuple[str, str, str]:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏, –≥–æ—Ä–æ–¥ –∏ —Ä–µ–≥–∏–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Ä–µ–∑—é–º–µ"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏  
    status_patterns = {
        "–ê–∫—Ç–∏–≤–Ω–æ –∏—â—É —Ä–∞–±–æ—Ç—É": r"–ê–∫—Ç–∏–≤–Ω–æ –∏—â—É —Ä–∞–±–æ—Ç—É",
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞": r"–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞",
        "–ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 2-3 –º–µ—Å—è—Ü–∞": r"–ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 2-3 –º–µ—Å—è—Ü–∞",
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –Ω–µ–¥–µ–ª—å": r"–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –Ω–µ–¥–µ–ª—å",
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞": r"–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞"
    }
    
    status = "–ù–µ —É–∫–∞–∑–∞–Ω"
    for status_text, pattern in status_patterns.items():
        if re.search(pattern, text):
            status = status_text
            break
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ –∏ —Ä–µ–≥–∏–æ–Ω–∞
    location_patterns = [
        r"üè†\s*([^üìû]+?)(?=üìû|$)",  # –ü–æ—Å–ª–µ –¥–æ–º–∏–∫–∞ –¥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        r"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ[:\s]*([^üìû\n]+)",
        r"–ì–æ—Ä–æ–¥[:\s]*([^üìû\n]+)",
        r"([–ê-–Ø][–∞-—è]+(?:\s+[–ê-–Ø][–∞-—è]+)*)\s*–æ–±–ª–∞—Å—Ç—å",
        r"–≥\.\s*([–ê-–Ø][–∞-—è]+(?:\s+[–ê-–Ø][–∞-—è]+)*)",
    ]
    
    city = "–ù–µ —É–∫–∞–∑–∞–Ω"
    region = "–ù–µ —É–∫–∞–∑–∞–Ω"
    
    for pattern in location_patterns:
        match = re.search(pattern, text)
        if match:
            location_text = match.group(1).strip()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ "–ì–æ—Ä–æ–¥, –†–µ–≥–∏–æ–Ω"
            if ',' in location_text:
                parts = [part.strip() for part in location_text.split(',')]
                if len(parts) >= 2:
                    city = parts[0]
                    region = parts[1]
                else:
                    city = parts[0]
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ "–æ–±–ª–∞—Å—Ç—å" –≤ —Ç–µ–∫—Å—Ç–µ
                if "–æ–±–ª–∞—Å—Ç—å" in location_text.lower():
                    region = location_text
                else:
                    city = location_text
            break
    
    return status, city, region

def process_resume_with_api(resume_data: Dict, token: str, chats_by_resume: Dict) -> Dict:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —Ä–µ–∑—é–º–µ —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ API –∏ –∞–Ω–∞–ª–∏–∑–æ–º —á–∞—Ç–æ–≤
    """
    resume_id = resume_data.get('resume_id', '')
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ API
    api_data = fetch_resume_data(resume_id, token)
    contacts_data = fetch_resume_contacts(resume_id, token)
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞
    result = {
        'resume_id': resume_id,
        'name': resume_data.get('name', ''),
        'age': resume_data.get('age', ''),
        'experience': resume_data.get('experience', ''),
        'position': resume_data.get('position', ''),
        'salary': resume_data.get('salary', ''),
        'raw_text': resume_data.get('raw_text', ''),
        'purchase_date': resume_data.get('purchase_date', ''),
        'update_date': resume_data.get('update_date', ''),
    }
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ API
    if api_data:
        result.update({
            'api_position': api_data.get('position', ''),
            'api_experience_months': api_data.get('experience_months', ''),
            'api_salary_from': api_data.get('salary', {}).get('from', ''),
            'api_salary_to': api_data.get('salary', {}).get('to', ''),
            'api_education': api_data.get('education', [{}])[0].get('name', '') if api_data.get('education') else '',
            'api_skills': ', '.join(api_data.get('skills', [])),
        })
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if contacts_data:
        result.update({
            'phone': contacts_data.get('phone', ''),
            'email': contacts_data.get('email', ''),
        })
    
    # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    raw_text = result['raw_text']
    status, city, region = parse_status_and_location(raw_text)
    result.update({
        'status': status,
        'city': city,
        'region': region,
    })
    
    # –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞
    chat_data = chats_by_resume.get(resume_id, {})
    if chat_data:
        chat_id = chat_data.get('id', '')
        messages = fetch_chat_messages(chat_id, token) if chat_id else []
        
        chat_status, last_msg_direction, last_msg_text = analyze_chat_status(chat_data, messages)
        
        result.update({
            'chat_id': chat_id,
            'chat_status': chat_status.value,
            'last_message_direction': last_msg_direction.value,
            'last_message_text': last_msg_text[:100] + '...' if len(last_msg_text) > 100 else last_msg_text,
            'chat_url': f"https://www.avito.ru/profile/messenger/{chat_id}" if chat_id else ""
        })
    else:
        result.update({
            'chat_id': '',
            'chat_status': ChatStatus.NO_CHAT.value,
            'last_message_direction': '',
            'last_message_text': '',
            'chat_url': ''
        })
    
    return result

# ========== –§–£–ù–ö–¶–ò–ò –û–ë–†–ê–ë–û–¢–ö–ò ==========

def process_resumes_parallel(resume_list: List[Dict], token: str, chats_by_resume: Dict, max_workers: int = 8) -> List[Dict]:
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ —Å API-–∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏ –∞–Ω–∞–ª–∏–∑–æ–º —á–∞—Ç–æ–≤
    """
    print(f"üöÄ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É {len(resume_list)} —Ä–µ–∑—é–º–µ (–ø–æ—Ç–æ–∫–æ–≤: {max_workers})")
    
    processed_resumes = []
    
    with ThreadPoolExecutor(max_workers=max_workers) as executor:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏
        future_to_resume = {
            executor.submit(process_resume_with_api, resume_data, token, chats_by_resume): resume_data
            for resume_data in resume_list
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for future in as_completed(future_to_resume):
            resume_data = future_to_resume[future]
            try:
                result = future.result()
                processed_resumes.append(result)
                
                if len(processed_resumes) % 10 == 0:
                    print(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(processed_resumes)}/{len(resume_list)}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ {resume_data.get('resume_id', 'unknown')}: {e}")
    
    print(f"üèÅ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(processed_resumes)} —Ä–µ–∑—é–º–µ")
    return processed_resumes

def create_priority_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤"""
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    status_priority = {
        "–ê–∫—Ç–∏–≤–Ω–æ –∏—â—É —Ä–∞–±–æ—Ç—É": 1,
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞": 2,
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –Ω–µ–¥–µ–ª—å": 3,
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞": 4,
        "–ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 2-3 –º–µ—Å—è—Ü–∞": 5,
        "–ù–µ —É–∫–∞–∑–∞–Ω": 6
    }
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É —á–∞—Ç–∞
    chat_priority = {
        "–ü—Ä–æ—á–∏—Ç–∞–ª/–û—Ç–≤–µ—Ç–∏–ª": 1,
        "–ü—Ä–æ—á–∏—Ç–∞–ª/–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª": 2,  
        "–ù–µ –≤—ã—Å—ã–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è": 3,
        "–ß–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç": 4,
        "–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ": 5,
        "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π": 6
    }
    
    # –ö–æ–ø–∏—Ä—É–µ–º DataFrame
    priority_df = df.copy()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    priority_df['status_priority'] = priority_df['status'].map(status_priority).fillna(6)
    priority_df['chat_priority'] = priority_df['chat_status'].map(chat_priority).fillna(6)
    
    # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–º–µ–Ω—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    priority_df['combined_priority'] = priority_df['status_priority'] + priority_df['chat_priority'] * 0.1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    priority_df = priority_df.sort_values(['combined_priority', 'update_date'], ascending=[True, False])
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    priority_df = priority_df.drop(['status_priority', 'chat_priority', 'combined_priority'], axis=1)
    
    return priority_df

def filter_today_updates(df: pd.DataFrame, tz: timezone) -> pd.DataFrame:
    """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Ä–µ–∑—é–º–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ–≥–æ–¥–Ω—è"""
    today = datetime.now(tz).date()
    
    def is_today(date_str):
        if pd.isna(date_str) or date_str == '':
            return False
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if '—Å–µ–≥–æ–¥–Ω—è' in str(date_str).lower():
                return True
            elif '–≤—á–µ—Ä–∞' in str(date_str).lower():
                return False
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –¥–∞—Ç—É
            date_obj = pd.to_datetime(date_str).date()
            return date_obj == today
        except:
            return False
    
    return df[df['update_date'].apply(is_today)]

def create_not_contacted_dataframe(df: pd.DataFrame) -> pd.DataFrame:
    """
    –°–æ–∑–¥–∞–µ—Ç DataFrame —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏, –∫–æ–º—É –Ω–µ –ø–∏—Å–∞–ª–∏
    –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å chat_status = "–ù–µ –≤—ã—Å—ã–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
    """
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∫–æ–º—É –Ω–µ –ø–∏—Å–∞–ª–∏
    not_contacted = df[df['chat_status'] == ChatStatus.NO_MESSAGES_SENT.value].copy()
    
    if not_contacted.empty:
        return not_contacted
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    status_priority = {
        "–ê–∫—Ç–∏–≤–Ω–æ –∏—â—É —Ä–∞–±–æ—Ç—É": 1,
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞": 2,
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö –Ω–µ–¥–µ–ª—å": 3,
        "–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞": 4,
        "–ë—É–¥—É –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ 2-3 –º–µ—Å—è—Ü–∞": 5,
        "–ù–µ —É–∫–∞–∑–∞–Ω": 6
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    not_contacted['status_priority'] = not_contacted['status'].map(status_priority).fillna(6)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    not_contacted = not_contacted.sort_values(['status_priority', 'update_date'], ascending=[True, False])
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
    not_contacted = not_contacted.drop(['status_priority'], axis=1)
    
    return not_contacted

# ========== –°–ö–†–ê–ü–ò–ù–ì –° PLAYWRIGHT ==========

def scrape_resumes_with_playwright(limit: int = 100, headless: bool = True) -> List[Dict]:
    """–°–∫—Ä–∞–ø–∏–Ω–≥ —Ä–µ–∑—é–º–µ —Å –ø–æ–º–æ—â—å—é Playwright"""
    
    print(f"üé≠ –ó–∞–ø—É—Å–∫–∞—é Playwright –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ {limit} —Ä–µ–∑—é–º–µ...")
    
    resumes = []
    
    with sync_playwright() as p:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º
        browser = p.chromium.launch_persistent_context(
            user_data_dir=BROWSER_PROFILE_PATH,
            headless=headless,
            args=['--no-sandbox', '--disable-dev-shm-usage']
        )
        
        try:
            page = browser.new_page()
            page.set_default_timeout(30000)
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
            print("üåê –ü–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ...")
            page.goto("https://www.avito.ru/profile/paid-cvs")
            page.wait_for_load_state('networkidle')
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            page.wait_for_selector('[data-marker="item"]', timeout=10000)
            
            print("üìä –ù–∞—á–∏–Ω–∞—é —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–∫—Ä–æ–ª–ª–∏–Ω–≥ —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            resume_count = 0
            scroll_attempts = 0
            max_scroll_attempts = 50
            
            while resume_count < limit and scroll_attempts < max_scroll_attempts:
                # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∑—é–º–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                resume_elements = page.query_selector_all('[data-marker="item"]')
                
                if len(resume_elements) > resume_count:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                    for i in range(resume_count, min(len(resume_elements), limit)):
                        element = resume_elements[i]
                        
                        try:
                            resume_data = extract_resume_data(element)
                            if resume_data and resume_data['resume_id']:
                                resumes.append(resume_data)
                                print(f"  ‚úÖ {len(resumes)}. {resume_data['name']} (ID: {resume_data['resume_id']})")
                        except Exception as e:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—é–º–µ {i+1}: {e}")
                    
                    resume_count = len(resumes)
                
                if resume_count >= limit:
                    break
                
                # –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑
                page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
                time.sleep(1)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                new_elements = page.query_selector_all('[data-marker="item"]')
                if len(new_elements) == len(resume_elements):
                    scroll_attempts += 1
                else:
                    scroll_attempts = 0
                
                print(f"  üìÑ –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {len(new_elements)}, —Å–æ–±—Ä–∞–Ω–æ: {resume_count}")
            
            print(f"üèÅ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(resumes)} —Ä–µ–∑—é–º–µ")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞: {e}")
        finally:
            browser.close()
    
    return resumes

def extract_resume_data(element) -> Optional[Dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ –∏–∑ DOM-—ç–ª–µ–º–µ–Ω—Ç–∞"""
    try:
        # ID —Ä–µ–∑—é–º–µ –∏–∑ —Å—Å—ã–ª–∫–∏
        link_element = element.query_selector('a[href*="/resume/"]')
        resume_id = ""
        if link_element:
            href = link_element.get_attribute('href')
            if href:
                match = re.search(r'/resume/(\w+)', href)
                if match:
                    resume_id = match.group(1)
        
        if not resume_id:
            return None
        
        # –¢–µ–∫—Å—Ç –≤—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
        raw_text = element.inner_text()
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        name_element = element.query_selector('[data-marker="item-title"]')
        name = name_element.inner_text().strip() if name_element else ""
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        age = extract_age(raw_text)
        experience = extract_experience(raw_text)
        position = extract_position(raw_text)
        salary = extract_salary(raw_text)
        purchase_date = extract_purchase_date(raw_text)
        update_date = extract_update_date(raw_text)
        
        return {
            'resume_id': resume_id,
            'name': name,
            'age': age,
            'experience': experience,
            'position': position,
            'salary': salary,
            'raw_text': raw_text,
            'purchase_date': purchase_date,
            'update_date': update_date,
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ: {e}")
        return None

def extract_age(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'(\d+)\s*–ª–µ—Ç',
        r'(\d+)\s*–≥–æ–¥–∞',
        r'(\d+)\s*–≥–æ–¥',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1)
    
    return ""

def extract_experience(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã[:\s]*([^\n]+)',
        r'(\d+\s*(?:–ª–µ—Ç|–≥–æ–¥–∞|–≥–æ–¥))\s*–æ–ø—ã—Ç–∞',
        r'–°—Ç–∞–∂[:\s]*([^\n]+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(1).strip()
    
    return ""

def extract_position(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∂–µ–ª–∞–µ–º—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    lines = text.split('\n')
    
    # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –¥–æ–ª–∂–Ω–æ—Å—Ç—å—é (–æ–±—ã—á–Ω–æ –æ–¥–Ω–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫)
    for i, line in enumerate(lines[:5]):
        line = line.strip()
        if line and not re.match(r'^\d+\s*(–ª–µ—Ç|–≥–æ–¥–∞|–≥–æ–¥)', line) and len(line) > 5:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∏–º—è –∏ –Ω–µ –¥—Ä—É–≥–∞—è —Å–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            if not re.match(r'^[–ê-–Ø][–∞-—è]+\s+[–ê-–Ø][–∞-—è]+$', line):
                return line
    
    return ""

def extract_salary(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'(\d+\s*(?:\d+\s*)*\d+)\s*‚ÇΩ',
        r'–æ—Ç\s*(\d+\s*(?:\d+\s*)*\d+)',
        r'–¥–æ\s*(\d+\s*(?:\d+\s*)*\d+)',
        r'–ó–∞—Ä–ø–ª–∞—Ç–∞[:\s]*([^\n]+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1).strip()
    
    return ""

def extract_purchase_date(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –ø–æ–∫—É–ø–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'–ö—É–ø–ª–µ–Ω–æ[:\s]*([^\n]+)',
        r'–ü–æ–∫—É–ø–∫–∞[:\s]*([^\n]+)',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text)
        if match:
            return match.group(1).strip()
    
    return ""

def extract_update_date(text: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'–û–±–Ω–æ–≤–ª–µ–Ω–æ[:\s]*([^\n]+)',
        r'—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|\d+\s+\w+\s+–Ω–∞–∑–∞–¥',
    ]
    
    for pattern in patterns:
        match = re.search(pattern, text, re.IGNORECASE)
        if match:
            return match.group(0).strip()
    
    return ""

# ========== –°–û–ó–î–ê–ù–ò–ï EXCEL ==========

def create_excel_output(resumes: List[Dict], stoplist: set, tz: timezone) -> str:
    """–°–æ–∑–¥–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏"""
    
    timestamp = datetime.now(tz).strftime("%Y%m%d_%H%M%S")
    output_file = Path(OUTPUT_DIR) / f"avito_paid_cvs_{timestamp}.xlsx"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    output_file.parent.mkdir(exist_ok=True)
    
    print(f"üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª: {output_file}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π DataFrame
    df = pd.DataFrame(resumes)
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ
    included_df = df[~df['resume_id'].isin(stoplist)].copy()
    excluded_df = df[df['resume_id'].isin(stoplist)].copy()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
    priority_df = create_priority_dataframe(included_df)
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_df = filter_today_updates(included_df, tz)
    
    # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏, –∫–æ–º—É –Ω–µ –ø–∏—Å–∞–ª–∏ (–≤–∫–ª—é—á–∞—è –∏–∑ —Å—Ç–æ–ø-–ª–∏—Å—Ç–∞)
    not_contacted_df = create_not_contacted_dataframe(df)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å df, –≤–∫–ª—é—á–∞—è —Å—Ç–æ–ø-–ª–∏—Å—Ç
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = {
        '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å': [
            '–í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ —Å–æ–±—Ä–∞–Ω–æ',
            '–í–∫–ª—é—á–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É',
            '–ò—Å–∫–ª—é—á–µ–Ω–æ –ø–æ —Å—Ç–æ–ø-–ª–∏—Å—Ç—É',
            '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤',
            '–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è',
            '–ö–æ–º—É –Ω–µ –ø–∏—Å–∞–ª–∏',
            '–ê–∫—Ç–∏–≤–Ω–æ –∏—â—É—Ç —Ä–∞–±–æ—Ç—É',
            '–ì–æ—Ç–æ–≤—ã –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞',
            '–ü—Ä–æ—á–∏—Ç–∞–ª–∏ –∏ –æ—Ç–≤–µ—Ç–∏–ª–∏',
            '–ü—Ä–æ—á–∏—Ç–∞–ª–∏, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏',
            '–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
        ],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [
            len(df),
            len(included_df),
            len(excluded_df),
            len(priority_df),
            len(today_df),
            len(not_contacted_df),
            len(df[df['status'] == '–ê–∫—Ç–∏–≤–Ω–æ –∏—â—É —Ä–∞–±–æ—Ç—É']),
            len(df[df['status'] == '–ì–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞']),
            len(df[df['chat_status'] == '–ü—Ä–æ—á–∏—Ç–∞–ª/–û—Ç–≤–µ—Ç–∏–ª']),
            len(df[df['chat_status'] == '–ü—Ä–æ—á–∏—Ç–∞–ª/–Ω–µ –æ—Ç–≤–µ—Ç–∏–ª']),
            len(df[df['chat_status'] == '–ù–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ']),
        ]
    }
    
    stats_df = pd.DataFrame(stats)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
        # –õ–∏—Å—Ç 1: –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å JSON
        df.to_excel(writer, sheet_name='paid_cvs', index=False)
        
        # –õ–∏—Å—Ç 2: –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
        priority_df.to_excel(writer, sheet_name='–î–ª—è_–∑–≤–æ–Ω–∫–æ–≤', index=False)
        
        # –õ–∏—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_df.to_excel(writer, sheet_name='–Ω–∞_—Å–µ–≥–æ–¥–Ω—è', index=False)
        
        # –õ–∏—Å—Ç 4: –ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø–æ —Å—Ç–æ–ø-–ª–∏—Å—Ç—É
        excluded_df.to_excel(writer, sheet_name='–ò—Å–∫–ª—é—á–µ–Ω–æ_–ø–æ_—Å—Ç–æ–ø–ª–∏—Å—Ç—É', index=False)
        
        # –õ–∏—Å—Ç 5: –ö–æ–º—É –Ω–µ –ø–∏—Å–∞–ª–∏ (–≤–∫–ª—é—á–∞—è —Å—Ç–æ–ø-–ª–∏—Å—Ç)
        not_contacted_df.to_excel(writer, sheet_name='–ö–æ–º—É_–Ω–µ_–ø–∏—Å–∞–ª–∏', index=False)
        
        # –õ–∏—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_df.to_excel(writer, sheet_name='summary', index=False)
    
    print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {output_file}")
    print(f"üìã –õ–∏—Å—Ç—ã:")
    print(f"  ‚Ä¢ paid_cvs: {len(df)} —Ä–µ–∑—é–º–µ (–≤—Å–µ –¥–∞–Ω–Ω—ã–µ)")
    print(f"  ‚Ä¢ –î–ª—è_–∑–≤–æ–Ω–∫–æ–≤: {len(priority_df)} —Ä–µ–∑—é–º–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ)")
    print(f"  ‚Ä¢ –Ω–∞_—Å–µ–≥–æ–¥–Ω—è: {len(today_df)} —Ä–µ–∑—é–º–µ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è)")
    print(f"  ‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω–æ_–ø–æ_—Å—Ç–æ–ø–ª–∏—Å—Ç—É: {len(excluded_df)} —Ä–µ–∑—é–º–µ")
    print(f"  ‚Ä¢ –ö–æ–º—É_–Ω–µ_–ø–∏—Å–∞–ª–∏: {len(not_contacted_df)} —Ä–µ–∑—é–º–µ (—Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —á–∞—Ç—ã)")
    print(f"  ‚Ä¢ summary: —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    
    return str(output_file)

# ========== –û–°–ù–û–í–ù–û–ô –ü–†–û–¶–ï–°–° ==========

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Avito: –°–∫—Ä–∞–ø–∏–Ω–≥ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ v12')
    parser.add_argument('--limit', type=int, default=100, help='–õ–∏–º–∏—Ç —Ä–µ–∑—é–º–µ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞')
    parser.add_argument('--threads', type=int, default=DEFAULT_THREADS, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤')
    parser.add_argument('--tz', type=str, default='Europe/Moscow', help='–í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞')
    parser.add_argument('--headless', action='store_true', help='–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –≤ headless —Ä–µ–∂–∏–º–µ')
    
    args = parser.parse_args()
    
    print("üöÄ Avito: –°–∫—Ä–∞–ø–∏–Ω–≥ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ v12")
    print(f"üìä –õ–∏–º–∏—Ç: {args.limit} —Ä–µ–∑—é–º–µ")
    print(f"üßµ –ü–æ—Ç–æ–∫–æ–≤: {args.threads}")
    print(f"üïê –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {args.tz}")
    print(f"üëª Headless: {args.headless}")
    
    tz = get_timezone_info(args.tz)
    
    try:
        # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–æ–ø-–ª–∏—Å—Ç
        stoplist = load_stoplist()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω API
        print("üîë –ü–æ–ª—É—á–∞—é —Ç–æ–∫–µ–Ω API...")
        token = get_access_token()
        print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
        all_chats, chat_stats = load_all_chats_optimized(token)
        
        # 4. –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —á–∞—Ç–æ–≤ –ø–æ resume_id
        chats_by_resume = {}
        for chat in all_chats:
            chat_context = chat.get('context', {})
            if chat_context.get('type') == 'resume':
                resume_id = chat_context.get('value')
                if resume_id:
                    chats_by_resume[resume_id] = chat
        
        print(f"üîó –ù–∞–π–¥–µ–Ω–æ {len(chats_by_resume)} —á–∞—Ç–æ–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∑—é–º–µ")
        
        # 5. –°–∫—Ä–∞–ø–∏–Ω–≥ —Ä–µ–∑—é–º–µ
        resumes = scrape_resumes_with_playwright(args.limit, args.headless)
        
        if not resumes:
            print("‚ùå –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # 6. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å API
        processed_resumes = process_resumes_parallel(resumes, token, chats_by_resume, args.threads)
        
        # 7. –°–æ–∑–¥–∞–Ω–∏–µ Excel
        output_file = create_excel_output(processed_resumes, stoplist, tz)
        
        print(f"üéâ –ì–æ—Ç–æ–≤–æ! –§–∞–π–ª: {output_file}")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()