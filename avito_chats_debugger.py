#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ Avito
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç API –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
"""
import requests
import json
import time
import os
from datetime import datetime
from typing import Dict, List, Optional, Tuple

# API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE = "https://api.avito.ru"
CLIENT_ID = "Dm4ruLMEr9MFsV72dN95"
CLIENT_SECRET = "f73lNoAJLzuqwoGtVaMnByhQfSlwcyIN_m7wyOeT"
TIMEOUT = 30

class AvitoChatsDebugger:
    def __init__(self):
        self.session = requests.Session()
        self.access_token = None
        self.user_id = None
        self.total_chats_found = 0
        self.all_chats = {}  # {chat_id: chat_data}
        
    def get_access_token(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ access token"""
        print("üîë –ü–æ–ª—É—á–∞–µ–º access token...")
        
        try:
            response = self.session.post(
                f"{API_BASE}/token",
                data={
                    "grant_type": "client_credentials",
                    "client_id": CLIENT_ID,
                    "client_secret": CLIENT_SECRET
                },
                timeout=TIMEOUT
            )
            
            if response.status_code == 200:
                data = response.json()
                self.access_token = data["access_token"]
                print(f"‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω: {self.access_token[:20]}...")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def get_user_id(self) -> bool:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ user_id"""
        print("üë§ –ü–æ–ª—É—á–∞–µ–º user ID...")
        
        headers = {"Authorization": f"Bearer {self.access_token}"}
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id
        endpoints = [
            "/core/v1/accounts/self",
            "/messenger/v1/accounts", 
            "/user/v1/self"
        ]
        
        for endpoint in endpoints:
            try:
                response = self.session.get(f"{API_BASE}{endpoint}", headers=headers, timeout=TIMEOUT)
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç {endpoint}: {json.dumps(data, ensure_ascii=False, indent=2)}")
                    
                    # –ò—â–µ–º user_id –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
                    user_id = (
                        data.get("id") or 
                        data.get("user_id") or 
                        data.get("account_id") or
                        (data.get("accounts", [{}])[0] if data.get("accounts") else {}).get("id")
                    )
                    
                    if user_id:
                        self.user_id = str(user_id)
                        print(f"‚úÖ User ID –Ω–∞–π–¥–µ–Ω: {self.user_id}")
                        return True
                        
                else:
                    print(f"‚ö†Ô∏è {endpoint}: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {endpoint}: {e}")
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å user_id")
        return False
    
    def analyze_chats_api(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ API —á–∞—Ç–æ–≤ - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º API —á–∞—Ç–æ–≤...")
        
        headers = {"Authorization": f"Bearer {self.access_token}"}
        analysis = {
            "v1_available": False,
            "v2_available": False, 
            "v1_total": 0,
            "v2_total": 0,
            "v1_max_offset": 0,
            "v2_max_offset": 0,
            "supported_params": [],
            "chat_types": [],
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º v1 API
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º messenger/v1...")
        try:
            v1_url = f"{API_BASE}/messenger/v1/accounts/{self.user_id}/chats"
            v1_response = self.session.get(v1_url, headers=headers, params={"limit": 1}, timeout=TIMEOUT)
            
            if v1_response.status_code == 200:
                analysis["v1_available"] = True
                v1_data = v1_response.json()
                analysis["v1_total"] = len(v1_data.get("chats", []))
                print(f"‚úÖ v1 API –¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞–∑–µ—Ü: {len(v1_data.get('chats', []))} —á–∞—Ç–æ–≤")
                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(v1_data.keys())}")
            else:
                print(f"‚ùå v1 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {v1_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ v1 API: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º v2 API
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º messenger/v2...")
        try:
            v2_url = f"{API_BASE}/messenger/v2/accounts/{self.user_id}/chats"
            v2_response = self.session.get(v2_url, headers=headers, params={"limit": 1}, timeout=TIMEOUT)
            
            if v2_response.status_code == 200:
                analysis["v2_available"] = True
                v2_data = v2_response.json()
                analysis["v2_total"] = len(v2_data.get("chats", []))
                print(f"‚úÖ v2 API –¥–æ—Å—Ç—É–ø–µ–Ω, –æ–±—Ä–∞–∑–µ—Ü: {len(v2_data.get('chats', []))} —á–∞—Ç–æ–≤")
                print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞: {list(v2_data.keys())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if "total" in v2_data:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'total': {v2_data['total']}")
                if "has_more" in v2_data:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'has_more': {v2_data['has_more']}")
                if "count" in v2_data:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ 'count': {v2_data['count']}")
                    
            else:
                print(f"‚ùå v2 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {v2_response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ v2 API: {e}")
        
        return analysis
    
    def test_pagination_limits(self, api_version: str = "v2") -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        print(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è {api_version}...")
        
        headers = {"Authorization": f"Bearer {self.access_token}"}
        url = f"{API_BASE}/messenger/{api_version}/accounts/{self.user_id}/chats"
        
        limits_test = {
            "max_working_offset": 0,
            "max_working_limit": 0,
            "error_at_offset": None,
            "total_found": 0
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
        print("üìè –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π limit...")
        for test_limit in [50, 100, 200, 500]:
            try:
                response = self.session.get(url, headers=headers, params={"limit": test_limit, "offset": 0}, timeout=TIMEOUT)
                if response.status_code == 200:
                    data = response.json()
                    actual_count = len(data.get("chats", []))
                    limits_test["max_working_limit"] = test_limit
                    print(f"‚úÖ limit={test_limit}: –ø–æ–ª—É—á–µ–Ω–æ {actual_count} —á–∞—Ç–æ–≤")
                    if actual_count < test_limit:
                        print(f"   ‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–≥–æ - –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã")
                        break
                else:
                    print(f"‚ùå limit={test_limit}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    break
            except Exception as e:
                print(f"‚ùå limit={test_limit}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
                break
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π offset
        print("\nüìê –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π offset...")
        working_limit = min(limits_test["max_working_limit"], 100)
        
        for test_offset in [0, 500, 1000, 1500, 2000, 5000]:
            try:
                response = self.session.get(url, headers=headers, params={"limit": working_limit, "offset": test_offset}, timeout=TIMEOUT)
                if response.status_code == 200:
                    data = response.json()
                    actual_count = len(data.get("chats", []))
                    if actual_count > 0:
                        limits_test["max_working_offset"] = test_offset
                        print(f"‚úÖ offset={test_offset}: –ø–æ–ª—É—á–µ–Ω–æ {actual_count} —á–∞—Ç–æ–≤")
                    else:
                        print(f"‚ö†Ô∏è offset={test_offset}: –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                        break
                else:
                    limits_test["error_at_offset"] = test_offset
                    print(f"‚ùå offset={test_offset}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    if test_offset == 1000:
                        print(f"   üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Swagger: offset <= 1000")
                    break
            except Exception as e:
                print(f"‚ùå offset={test_offset}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
                break
                
            time.sleep(0.2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return limits_test
    
    def test_advanced_parameters(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ API"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã...")
        
        headers = {"Authorization": f"Bearer {self.access_token}"}
        url = f"{API_BASE}/messenger/v2/accounts/{self.user_id}/chats"
        
        params_test = {
            "unread_only": {"supported": False, "result_count": 0},
            "chat_types": {"supported": False, "types_tested": []},
            "item_ids": {"supported": False},
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º unread_only
        print("üì® –¢–µ—Å—Ç–∏—Ä—É–µ–º unread_only...")
        try:
            response = self.session.get(url, headers=headers, params={"limit": 50, "unread_only": True}, timeout=TIMEOUT)
            if response.status_code == 200:
                data = response.json()
                unread_count = len(data.get("chats", []))
                params_test["unread_only"]["supported"] = True
                params_test["unread_only"]["result_count"] = unread_count
                print(f"‚úÖ unread_only=True: {unread_count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
            else:
                print(f"‚ùå unread_only –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è: {response.status_code}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ unread_only: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º chat_types
        print("üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º chat_types...")
        chat_types_to_test = ["u2i", "i2u", "public", "private"]
        
        for chat_type in chat_types_to_test:
            try:
                response = self.session.get(url, headers=headers, params={"limit": 10, "chat_types": chat_type}, timeout=TIMEOUT)
                if response.status_code == 200:
                    data = response.json()
                    type_count = len(data.get("chats", []))
                    params_test["chat_types"]["supported"] = True
                    params_test["chat_types"]["types_tested"].append({"type": chat_type, "count": type_count})
                    print(f"‚úÖ chat_types={chat_type}: {type_count} —á–∞—Ç–æ–≤")
                else:
                    print(f"‚ùå chat_types={chat_type}: {response.status_code}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ chat_types={chat_type}: {e}")
                
            time.sleep(0.1)
        
        return params_test
    
    def estimate_total_chats(self) -> int:
        """–û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤"""
        print("\nüìä –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤...")
        
        headers = {"Authorization": f"Bearer {self.access_token}"}
        url = f"{API_BASE}/messenger/v2/accounts/{self.user_id}/chats"
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–æ–π offset —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã
        estimates = []
        
        for test_offset in [0, 500, 900, 999]:
            try:
                response = self.session.get(url, headers=headers, params={"limit": 100, "offset": test_offset}, timeout=TIMEOUT)
                if response.status_code == 200:
                    data = response.json()
                    count = len(data.get("chats", []))
                    if count > 0:
                        estimate = test_offset + count
                        estimates.append(estimate)
                        print(f"üìç offset={test_offset}: +{count} —á–∞—Ç–æ–≤, –æ—Ü–µ–Ω–∫–∞ –º–∏–Ω–∏–º—É–º: {estimate}")
                    else:
                        print(f"üìç offset={test_offset}: –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö")
                        break
                else:
                    print(f"üìç offset={test_offset}: –æ—à–∏–±–∫–∞ {response.status_code}")
                    break
            except Exception as e:
                print(f"üìç offset={test_offset}: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {e}")
                break
                
            time.sleep(0.1)
        
        if estimates:
            estimated_total = max(estimates)
            print(f"üéØ –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤: ‚â•{estimated_total}")
            return estimated_total
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤")
            return 0
    
    def load_all_chats_optimized(self) -> Dict[str, dict]:
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ —Å –æ–±—Ö–æ–¥–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        print("\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —á–∞—Ç–æ–≤...")
        
        headers = {"Authorization": f"Bearer {self.access_token}"}
        all_chats = {}
        
        strategies = [
            {"name": "–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ v2", "method": self._load_main_v2},
            {"name": "–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –æ—Ç–¥–µ–ª—å–Ω–æ", "method": self._load_unread_only},
            {"name": "Fallback v1", "method": self._load_v1_fallback},
            {"name": "–ü–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤", "method": self._load_by_chat_types},
        ]
        
        for strategy in strategies:
            print(f"\nüîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy['name']}")
            try:
                strategy_chats = strategy["method"](headers)
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                added_count = 0
                for chat_id, chat_data in strategy_chats.items():
                    if chat_id not in all_chats:
                        all_chats[chat_id] = chat_data
                        added_count += 1
                
                print(f"‚úÖ {strategy['name']}: +{added_count} –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤ (–≤—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö: {len(all_chats)})")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ '{strategy['name']}': {e}")
        
        print(f"\nüéâ –ò—Ç–æ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(all_chats)}")
        return all_chats
    
    def _load_main_v2(self, headers: dict) -> Dict[str, dict]:
        """–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ v2 API"""
        chats = {}
        url = f"{API_BASE}/messenger/v2/accounts/{self.user_id}/chats"
        
        offset = 0
        limit = 100
        max_offset = 1000
        
        while offset <= max_offset:
            try:
                response = self.session.get(url, headers=headers, params={"offset": offset, "limit": limit}, timeout=TIMEOUT)
                
                if response.status_code == 200:
                    data = response.json()
                    batch_chats = data.get("chats", [])
                    
                    if not batch_chats:
                        print(f"   üìã –ù–µ—Ç –±–æ–ª—å—à–µ —á–∞—Ç–æ–≤ –Ω–∞ offset={offset}")
                        break
                    
                    for chat in batch_chats:
                        if chat.get("id"):
                            chats[chat["id"]] = chat
                    
                    print(f"   üì• offset={offset}: +{len(batch_chats)} —á–∞—Ç–æ–≤")
                    
                    if len(batch_chats) < limit:
                        print(f"   üìã –ü–æ–ª—É—á–µ–Ω–∞ –Ω–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º")
                        break
                        
                    offset += limit
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞ offset={offset}: {response.status_code}")
                    break
                    
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ offset={offset}: {e}")
                break
                
            time.sleep(0.1)
        
        return chats
    
    def _load_unread_only(self, headers: dict) -> Dict[str, dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"""
        chats = {}
        url = f"{API_BASE}/messenger/v2/accounts/{self.user_id}/chats"
        
        try:
            response = self.session.get(url, headers=headers, params={"limit": 100, "unread_only": True}, timeout=TIMEOUT)
            
            if response.status_code == 200:
                data = response.json()
                batch_chats = data.get("chats", [])
                
                for chat in batch_chats:
                    if chat.get("id"):
                        chats[chat["id"]] = chat
                
                print(f"   üì® –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ: {len(batch_chats)} —á–∞—Ç–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è unread_only –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ unread_only: {e}")
        
        return chats
    
    def _load_v1_fallback(self, headers: dict) -> Dict[str, dict]:
        """Fallback –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ v1 API"""
        chats = {}
        url = f"{API_BASE}/messenger/v1/accounts/{self.user_id}/chats"
        
        try:
            response = self.session.get(url, headers=headers, params={"limit": 100}, timeout=TIMEOUT)
            
            if response.status_code == 200:
                data = response.json()
                batch_chats = data.get("chats", [])
                
                for chat in batch_chats:
                    if chat.get("id"):
                        chats[chat["id"]] = chat
                
                print(f"   üîÑ v1 API: {len(batch_chats)} —á–∞—Ç–æ–≤")
            else:
                print(f"   ‚ö†Ô∏è v1 API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ v1 API: {e}")
        
        return chats
    
    def _load_by_chat_types(self, headers: dict) -> Dict[str, dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —Ç–∏–ø–∞–º —á–∞—Ç–æ–≤"""
        chats = {}
        url = f"{API_BASE}/messenger/v2/accounts/{self.user_id}/chats"
        
        chat_types = ["u2i", "i2u"]
        
        for chat_type in chat_types:
            try:
                response = self.session.get(url, headers=headers, params={"limit": 100, "chat_types": chat_type}, timeout=TIMEOUT)
                
                if response.status_code == 200:
                    data = response.json()
                    batch_chats = data.get("chats", [])
                    
                    for chat in batch_chats:
                        if chat.get("id"):
                            chats[chat["id"]] = chat
                    
                    print(f"   üí¨ –¢–∏–ø {chat_type}: {len(batch_chats)} —á–∞—Ç–æ–≤")
                else:
                    print(f"   ‚ö†Ô∏è –¢–∏–ø {chat_type} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status_code}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–∏–ø–∞ {chat_type}: {e}")
                
            time.sleep(0.1)
        
        return chats
    
    def save_debug_results(self, analysis: dict, limits: dict, params: dict, all_chats: dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–ª–∞–¥–∫–∏"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        debug_data = {
            "timestamp": timestamp,
            "user_id": self.user_id,
            "api_analysis": analysis,
            "pagination_limits": limits,
            "parameters_test": params,
            "total_chats_loaded": len(all_chats),
            "chat_sample": list(all_chats.keys())[:10],  # –û–±—Ä–∞–∑–µ—Ü ID —á–∞—Ç–æ–≤
            "recommendations": self._generate_recommendations(analysis, limits, params, all_chats)
        }
        
        filename = f"avito_chats_debug_{timestamp}.json"
        
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(debug_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ª–∞–¥–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        return filename
    
    def _generate_recommendations(self, analysis: dict, limits: dict, params: dict, all_chats: dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        recommendations = []
        
        if limits.get("error_at_offset") == 1000:
            recommendations.append("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ offset=1000, –Ω—É–∂–µ–Ω –æ–±—Ö–æ–¥")
        
        if params.get("unread_only", {}).get("supported"):
            recommendations.append("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä unread_only —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        
        if analysis.get("v1_available"):
            recommendations.append("‚úÖ v1 API –¥–æ—Å—Ç—É–ø–µ–Ω, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ fallback")
        
        if params.get("chat_types", {}).get("supported"):
            recommendations.append("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä chat_types —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ —Ç–∏–ø–∞–º")
        
        if len(all_chats) > 1000:
            recommendations.append(f"üéØ –£–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {len(all_chats)} —á–∞—Ç–æ–≤ - –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞ offset!")
        
        recommendations.append("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –≤—Å–µ—Ö —Ä–∞–±–æ—á–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        
        return recommendations
    
    def run_full_debug(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏"""
        print("üêõ AVITO CHATS DEBUGGER - –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ API —á–∞—Ç–æ–≤")
        print("=" * 60)
        
        # –®–∞–≥ 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not self.get_access_token():
            return False
        
        if not self.get_user_id():
            return False
        
        # –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ API
        analysis = self.analyze_chats_api()
        
        # –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤
        limits = self.test_pagination_limits()
        
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        params = self.test_advanced_parameters()
        
        # –®–∞–≥ 5: –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        estimated_total = self.estimate_total_chats()
        
        # –®–∞–≥ 6: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        all_chats = self.load_all_chats_optimized()
        
        # –®–∞–≥ 7: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        debug_file = self.save_debug_results(analysis, limits, params, all_chats)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "=" * 60)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print("=" * 60)
        print(f"üéØ –û—Ü–µ–Ω–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Ç–æ–≤: ‚â•{estimated_total}")
        print(f"üì• –§–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_chats)} —á–∞—Ç–æ–≤")
        print(f"üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(all_chats)/max(estimated_total, 1)*100:.1f}%")
        print(f"üíæ –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç: {debug_file}")
        
        if len(all_chats) > 1000:
            print("‚úÖ –£–°–ü–ï–•: –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è offset=1000 —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –µ—â–µ —á–∞—Ç—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ª–∏–º–∏—Ç–æ–≤")
        
        return True


def main():
    debugger = AvitoChatsDebugger()
    debugger.run_full_debug()


if __name__ == "__main__":
    main()